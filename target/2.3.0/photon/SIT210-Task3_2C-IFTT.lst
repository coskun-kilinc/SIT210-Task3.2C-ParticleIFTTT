
f:/Particle_Projects/SIT210-Task3_2C-IFTT/target/2.3.0/photon/SIT210-Task3_2C-IFTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002650  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2670  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  20000000  080a2674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000594  2000006c  2000006c  0003006c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a26e0  080a26e0  000226e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a2708  080a2708  00022708  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000f0352  00000000  00000000  0002270c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011e30  00000000  00000000  00112a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00014e56  00000000  00000000  0012488e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001a78  00000000  00000000  001396e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003f20  00000000  00000000  0013b15c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00024c88  00000000  00000000  0013f07c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002788e  00000000  00000000  00163d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a96f1  00000000  00000000  0018b592  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004744  00000000  00000000  00234c84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f002 f973 	bl	80a231c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f002 f97b 	bl	80a2338 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a2674 	.word	0x080a2674
 80a0050:	2000006c 	.word	0x2000006c
 80a0054:	2000006c 	.word	0x2000006c
 80a0058:	200005fd 	.word	0x200005fd
 80a005c:	200005fd 	.word	0x200005fd

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f000 fe0f 	bl	80a0c84 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42a5      	cmp	r5, r4
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080a2650 	.word	0x080a2650
 80a0084:	080a2670 	.word	0x080a2670

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b8ec 	b.w	80a0264 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f913 	bl	80a02b8 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f000 bdad 	b.w	80a0bf4 <_post_loop>

080a009a <_Znaj>:
 80a009a:	f000 bb6d 	b.w	80a0778 <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f000 bb73 	b.w	80a0788 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN6BH1750C1EhR7TwoWire>:
#define CMD_SET_POWER_OFF   0x00
#define CMD_RESET           0x07


BH1750::BH1750(uint8_t _addr, TwoWire & _i2c) :
  m_i2c(_i2c), m_i2c_addr(_addr)
 80a00b2:	6042      	str	r2, [r0, #4]
{
  m_mode = continuous_high_res2;
 80a00b4:	2211      	movs	r2, #17
  m_i2c(_i2c), m_i2c_addr(_addr)
 80a00b6:	7041      	strb	r1, [r0, #1]
  m_mode = continuous_high_res2;
 80a00b8:	7002      	strb	r2, [r0, #0]
}
 80a00ba:	4770      	bx	lr

080a00bc <_ZN6BH17505beginEv>:

bool BH1750::begin()
{
 80a00bc:	b510      	push	{r4, lr}
 80a00be:	4604      	mov	r4, r0
  if (!m_i2c.isEnabled())
 80a00c0:	6840      	ldr	r0, [r0, #4]
 80a00c2:	f001 f830 	bl	80a1126 <_ZN7TwoWire9isEnabledEv>
 80a00c6:	b910      	cbnz	r0, 80a00ce <_ZN6BH17505beginEv+0x12>
  {
    m_i2c.begin();
 80a00c8:	6860      	ldr	r0, [r4, #4]
 80a00ca:	f000 ffef 	bl	80a10ac <_ZN7TwoWire5beginEv>
  }

  return true;
}
 80a00ce:	2001      	movs	r0, #1
 80a00d0:	bd10      	pop	{r4, pc}
	...

080a00d4 <_ZN6BH175015get_light_levelEv>:
    wait_for_measurement();
  }
}

float BH1750::get_light_level()
{
 80a00d4:	b570      	push	{r4, r5, r6, lr}
 80a00d6:	4604      	mov	r4, r0
  m_i2c.beginTransmission(m_i2c_addr);
 80a00d8:	7841      	ldrb	r1, [r0, #1]
 80a00da:	6840      	ldr	r0, [r0, #4]
 80a00dc:	f001 f818 	bl	80a1110 <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.requestFrom(m_i2c_addr, 2);
 80a00e0:	7861      	ldrb	r1, [r4, #1]
 80a00e2:	2202      	movs	r2, #2
 80a00e4:	6860      	ldr	r0, [r4, #4]
 80a00e6:	f001 f810 	bl	80a110a <_ZN7TwoWire11requestFromEhj>
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
 80a00ea:	6860      	ldr	r0, [r4, #4]
 80a00ec:	6803      	ldr	r3, [r0, #0]
 80a00ee:	695b      	ldr	r3, [r3, #20]
 80a00f0:	4798      	blx	r3
 80a00f2:	4606      	mov	r6, r0
 80a00f4:	6860      	ldr	r0, [r4, #4]
 80a00f6:	6803      	ldr	r3, [r0, #0]
 80a00f8:	695b      	ldr	r3, [r3, #20]
 80a00fa:	4798      	blx	r3
 80a00fc:	4605      	mov	r5, r0
  m_i2c.endTransmission();
 80a00fe:	6860      	ldr	r0, [r4, #4]
 80a0100:	f001 f80e 	bl	80a1120 <_ZN7TwoWire15endTransmissionEv>
  const uint16_t level = (m_i2c.read() << 8) | m_i2c.read();
 80a0104:	ea45 2006 	orr.w	r0, r5, r6, lsl #8

  return (float)level / 1.2f; // convert to lux
 80a0108:	b280      	uxth	r0, r0
 80a010a:	f001 fee3 	bl	80a1ed4 <__aeabi_ui2f>
 80a010e:	4902      	ldr	r1, [pc, #8]	; (80a0118 <_ZN6BH175015get_light_levelEv+0x44>)
 80a0110:	f001 ffec 	bl	80a20ec <__aeabi_fdiv>
}
 80a0114:	bd70      	pop	{r4, r5, r6, pc}
 80a0116:	bf00      	nop
 80a0118:	3f99999a 	.word	0x3f99999a

080a011c <_ZN6BH175020wait_for_measurementEv>:

void BH1750::wait_for_measurement()
{
  delay((m_mode == forced_mode_low_res ||
 80a011c:	7803      	ldrb	r3, [r0, #0]
 80a011e:	2b23      	cmp	r3, #35	; 0x23
 80a0120:	d005      	beq.n	80a012e <_ZN6BH175020wait_for_measurementEv+0x12>
 80a0122:	2b13      	cmp	r3, #19
 80a0124:	bf0c      	ite	eq
 80a0126:	2018      	moveq	r0, #24
 80a0128:	20b4      	movne	r0, #180	; 0xb4
 80a012a:	f000 bd23 	b.w	80a0b74 <delay>
 80a012e:	2018      	movs	r0, #24
 80a0130:	e7fb      	b.n	80a012a <_ZN6BH175020wait_for_measurementEv+0xe>

080a0132 <_ZN6BH175015set_sensor_modeENS_8SensModeE>:
{
 80a0132:	b538      	push	{r3, r4, r5, lr}
 80a0134:	4604      	mov	r4, r0
 80a0136:	460d      	mov	r5, r1
  m_i2c.beginTransmission(m_i2c_addr);
 80a0138:	7841      	ldrb	r1, [r0, #1]
 80a013a:	6840      	ldr	r0, [r0, #4]
 80a013c:	f000 ffe8 	bl	80a1110 <_ZN7TwoWire17beginTransmissionEh>
  m_i2c.write((uint8_t)_mode);
 80a0140:	6860      	ldr	r0, [r4, #4]
 80a0142:	4629      	mov	r1, r5
 80a0144:	6803      	ldr	r3, [r0, #0]
 80a0146:	689b      	ldr	r3, [r3, #8]
 80a0148:	4798      	blx	r3
  m_i2c.endTransmission();
 80a014a:	6860      	ldr	r0, [r4, #4]
 80a014c:	f000 ffe8 	bl	80a1120 <_ZN7TwoWire15endTransmissionEv>
  wait_for_measurement();
 80a0150:	4620      	mov	r0, r4
  m_mode = _mode;
 80a0152:	7025      	strb	r5, [r4, #0]
}
 80a0154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  wait_for_measurement();
 80a0158:	f7ff bfe0 	b.w	80a011c <_ZN6BH175020wait_for_measurementEv>

080a015c <_ZN6BH175023make_forced_measurementEv>:
{
 80a015c:	b510      	push	{r4, lr}
  if (m_mode == forced_mode_high_res  ||
 80a015e:	7803      	ldrb	r3, [r0, #0]
{
 80a0160:	4604      	mov	r4, r0
  if (m_mode == forced_mode_high_res  ||
 80a0162:	f1a3 0220 	sub.w	r2, r3, #32
 80a0166:	2a01      	cmp	r2, #1
 80a0168:	d901      	bls.n	80a016e <_ZN6BH175023make_forced_measurementEv+0x12>
      m_mode == forced_mode_high_res2 ||
 80a016a:	2b23      	cmp	r3, #35	; 0x23
 80a016c:	d110      	bne.n	80a0190 <_ZN6BH175023make_forced_measurementEv+0x34>
    m_i2c.beginTransmission(m_i2c_addr);
 80a016e:	7861      	ldrb	r1, [r4, #1]
 80a0170:	6860      	ldr	r0, [r4, #4]
 80a0172:	f000 ffcd 	bl	80a1110 <_ZN7TwoWire17beginTransmissionEh>
    m_i2c.write((uint8_t)m_mode);
 80a0176:	6860      	ldr	r0, [r4, #4]
 80a0178:	7821      	ldrb	r1, [r4, #0]
 80a017a:	6803      	ldr	r3, [r0, #0]
 80a017c:	689b      	ldr	r3, [r3, #8]
 80a017e:	4798      	blx	r3
    m_i2c.endTransmission();
 80a0180:	6860      	ldr	r0, [r4, #4]
 80a0182:	f000 ffcd 	bl	80a1120 <_ZN7TwoWire15endTransmissionEv>
    wait_for_measurement();
 80a0186:	4620      	mov	r0, r4
}
 80a0188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    wait_for_measurement();
 80a018c:	f7ff bfc6 	b.w	80a011c <_ZN6BH175020wait_for_measurementEv>
}
 80a0190:	bd10      	pop	{r4, pc}

080a0192 <_Z10writeEvent6String>:
const bool MIRROR_TO_SERIAL = true;
const double MESSAGE_INTERVAL = 150;

//Write an event to the cloud and/or the serial output depending on settings

void writeEvent( String text ){
 80a0192:	b510      	push	{r4, lr}
 80a0194:	4604      	mov	r4, r0
  // Particle.publish(text);
  if ( MIRROR_TO_SERIAL == true){
    Serial.println(text);
 80a0196:	f000 fe77 	bl	80a0e88 <_Z16_fetch_usbserialv>
 80a019a:	6821      	ldr	r1, [r4, #0]
  }
}
 80a019c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println(text);
 80a01a0:	f000 bbcc 	b.w	80a093c <_ZN5Print7printlnEPKc>

080a01a4 <_Z10writeEvent6Stringf>:

// Write an event to the cloud and/or the serial output depending on settings
// overloaded to accept and print data
void writeEvent( String text, float data ){
 80a01a4:	b538      	push	{r3, r4, r5, lr}
 80a01a6:	4605      	mov	r5, r0
 80a01a8:	460c      	mov	r4, r1
  // Particle.publish(text, String::format("%f", data), PRIVATE);
  if ( MIRROR_TO_SERIAL == true){
    Serial.print(text);
 80a01aa:	f000 fe6d 	bl	80a0e88 <_Z16_fetch_usbserialv>
 80a01ae:	6829      	ldr	r1, [r5, #0]
 80a01b0:	f000 fbb1 	bl	80a0916 <_ZN5Print5printEPKc>
    Serial.print(" ");
 80a01b4:	f000 fe68 	bl	80a0e88 <_Z16_fetch_usbserialv>
 80a01b8:	4905      	ldr	r1, [pc, #20]	; (80a01d0 <_Z10writeEvent6Stringf+0x2c>)
 80a01ba:	f000 fbac 	bl	80a0916 <_ZN5Print5printEPKc>
    Serial.println(data);
 80a01be:	f000 fe63 	bl	80a0e88 <_Z16_fetch_usbserialv>
 80a01c2:	4621      	mov	r1, r4
  }
}
 80a01c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Serial.println(data);
 80a01c8:	2202      	movs	r2, #2
 80a01ca:	f000 bcad 	b.w	80a0b28 <_ZN5Print7printlnEfi>
 80a01ce:	bf00      	nop
 80a01d0:	080a2484 	.word	0x080a2484

080a01d4 <_Z12writeWarning6Stringf>:

float writeWarning( String text, float lastUpdate){
 80a01d4:	b530      	push	{r4, r5, lr}
 80a01d6:	460c      	mov	r4, r1
 80a01d8:	b085      	sub	sp, #20
 80a01da:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a01dc:	f000 f95c 	bl	80a0498 <HAL_Timer_Get_Milli_Seconds>
    if ( (millis() - lastUpdate ) > MESSAGE_INTERVAL ){
 80a01e0:	f001 fe78 	bl	80a1ed4 <__aeabi_ui2f>
 80a01e4:	4621      	mov	r1, r4
 80a01e6:	f001 fdc3 	bl	80a1d70 <__aeabi_fsub>
 80a01ea:	490b      	ldr	r1, [pc, #44]	; (80a0218 <_Z12writeWarning6Stringf+0x44>)
 80a01ec:	f002 f886 	bl	80a22fc <__aeabi_fcmpgt>
 80a01f0:	b170      	cbz	r0, 80a0210 <_Z12writeWarning6Stringf+0x3c>
    writeEvent(text);
 80a01f2:	4629      	mov	r1, r5
 80a01f4:	4668      	mov	r0, sp
 80a01f6:	f000 fb5d 	bl	80a08b4 <_ZN6StringC1ERKS_>
 80a01fa:	4668      	mov	r0, sp
 80a01fc:	f7ff ffc9 	bl	80a0192 <_Z10writeEvent6String>
 80a0200:	4668      	mov	r0, sp
 80a0202:	f000 faeb 	bl	80a07dc <_ZN6StringD1Ev>
 80a0206:	f000 f947 	bl	80a0498 <HAL_Timer_Get_Milli_Seconds>
    return millis();
 80a020a:	f001 fe63 	bl	80a1ed4 <__aeabi_ui2f>
 80a020e:	4604      	mov	r4, r0
    }
    return lastUpdate;
}
 80a0210:	4620      	mov	r0, r4
 80a0212:	b005      	add	sp, #20
 80a0214:	bd30      	pop	{r4, r5, pc}
 80a0216:	bf00      	nop
 80a0218:	43160000 	.word	0x43160000

080a021c <_Z12writeWarning6Stringff>:

// considers time since last update before calling writeEvent
float writeWarning( String text, float data,  float lastUpdate){
 80a021c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a021e:	4614      	mov	r4, r2
 80a0220:	460d      	mov	r5, r1
 80a0222:	4606      	mov	r6, r0
 80a0224:	f000 f938 	bl	80a0498 <HAL_Timer_Get_Milli_Seconds>
    if ( (millis() - lastUpdate ) > MESSAGE_INTERVAL ){
 80a0228:	f001 fe54 	bl	80a1ed4 <__aeabi_ui2f>
 80a022c:	4621      	mov	r1, r4
 80a022e:	f001 fd9f 	bl	80a1d70 <__aeabi_fsub>
 80a0232:	490b      	ldr	r1, [pc, #44]	; (80a0260 <_Z12writeWarning6Stringff+0x44>)
 80a0234:	f002 f862 	bl	80a22fc <__aeabi_fcmpgt>
 80a0238:	b178      	cbz	r0, 80a025a <_Z12writeWarning6Stringff+0x3e>
    writeEvent(text, data);
 80a023a:	4631      	mov	r1, r6
 80a023c:	4668      	mov	r0, sp
 80a023e:	f000 fb39 	bl	80a08b4 <_ZN6StringC1ERKS_>
 80a0242:	4629      	mov	r1, r5
 80a0244:	4668      	mov	r0, sp
 80a0246:	f7ff ffad 	bl	80a01a4 <_Z10writeEvent6Stringf>
 80a024a:	4668      	mov	r0, sp
 80a024c:	f000 fac6 	bl	80a07dc <_ZN6StringD1Ev>
 80a0250:	f000 f922 	bl	80a0498 <HAL_Timer_Get_Milli_Seconds>
    return millis();
 80a0254:	f001 fe3e 	bl	80a1ed4 <__aeabi_ui2f>
 80a0258:	4604      	mov	r4, r0
    }
    return lastUpdate;
}
 80a025a:	4620      	mov	r0, r4
 80a025c:	b004      	add	sp, #16
 80a025e:	bd70      	pop	{r4, r5, r6, pc}
 80a0260:	43160000 	.word	0x43160000

080a0264 <setup>:


SYSTEM_THREAD(ENABLED);

// setup() runs once, when the device is first turned on.
void setup() {
 80a0264:	b510      	push	{r4, lr}
  // Initialise light-level sensor
  sensor.begin();
 80a0266:	4c0f      	ldr	r4, [pc, #60]	; (80a02a4 <setup+0x40>)
 80a0268:	4620      	mov	r0, r4
 80a026a:	f7ff ff27 	bl	80a00bc <_ZN6BH17505beginEv>
  sensor.set_sensor_mode(BH1750::forced_mode_high_res2);
 80a026e:	2121      	movs	r1, #33	; 0x21
 80a0270:	4620      	mov	r0, r4
 80a0272:	f7ff ff5e 	bl	80a0132 <_ZN6BH175015set_sensor_modeENS_8SensModeE>
  Serial.begin();
 80a0276:	f000 fe07 	bl	80a0e88 <_Z16_fetch_usbserialv>
 80a027a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a027e:	f000 fde9 	bl	80a0e54 <_ZN9USBSerial5beginEl>
 80a0282:	f000 f909 	bl	80a0498 <HAL_Timer_Get_Milli_Seconds>
  start = millis();
 80a0286:	f001 fe25 	bl	80a1ed4 <__aeabi_ui2f>
  end = 0;
 80a028a:	2200      	movs	r2, #0
  start = millis();
 80a028c:	4b06      	ldr	r3, [pc, #24]	; (80a02a8 <setup+0x44>)
 80a028e:	6018      	str	r0, [r3, #0]
  end = 0;
 80a0290:	4b06      	ldr	r3, [pc, #24]	; (80a02ac <setup+0x48>)
 80a0292:	601a      	str	r2, [r3, #0]
  Serial.print("Starting Terrarium monitoring application.");
 80a0294:	f000 fdf8 	bl	80a0e88 <_Z16_fetch_usbserialv>
}
 80a0298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial.print("Starting Terrarium monitoring application.");
 80a029c:	4904      	ldr	r1, [pc, #16]	; (80a02b0 <setup+0x4c>)
 80a029e:	f000 bb3a 	b.w	80a0916 <_ZN5Print5printEPKc>
 80a02a2:	bf00      	nop
 80a02a4:	2000008c 	.word	0x2000008c
 80a02a8:	20000094 	.word	0x20000094
 80a02ac:	2000006c 	.word	0x2000006c
 80a02b0:	080a2486 	.word	0x080a2486
 80a02b4:	00000000 	.word	0x00000000

080a02b8 <loop>:
  }
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
  float elapsedTime = millis()- start;
 80a02b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  start = millis();
 80a02bc:	4c58      	ldr	r4, [pc, #352]	; (80a0420 <loop+0x168>)
  float elapsedTime = millis()- start;
 80a02be:	b085      	sub	sp, #20
 80a02c0:	f000 f8ea 	bl	80a0498 <HAL_Timer_Get_Milli_Seconds>
  start = millis();
 80a02c4:	f001 fe06 	bl	80a1ed4 <__aeabi_ui2f>
 80a02c8:	6821      	ldr	r1, [r4, #0]
 80a02ca:	f001 fd51 	bl	80a1d70 <__aeabi_fsub>
 80a02ce:	4605      	mov	r5, r0
 80a02d0:	f000 f8e2 	bl	80a0498 <HAL_Timer_Get_Milli_Seconds>
  // make a new measurement, turns the device on if it is off
 80a02d4:	f001 fdfe 	bl	80a1ed4 <__aeabi_ui2f>
 80a02d8:	6020      	str	r0, [r4, #0]
  sensor.make_forced_measurement();
  // reads the measurement and assigns it to temporary variable lightLevel
 80a02da:	4852      	ldr	r0, [pc, #328]	; (80a0424 <loop+0x16c>)
 80a02dc:	f7ff ff3e 	bl	80a015c <_ZN6BH175023make_forced_measurementEv>
  float lightLevel = sensor.get_light_level();
  measureExposure(lightLevel, elapsedTime);
 80a02e0:	4850      	ldr	r0, [pc, #320]	; (80a0424 <loop+0x16c>)
 80a02e2:	f7ff fef7 	bl	80a00d4 <_ZN6BH175015get_light_levelEv>
  if (exposureForDay == true) { timeSinceLastExposure += elapsedTime; }
 80a02e6:	4c50      	ldr	r4, [pc, #320]	; (80a0428 <loop+0x170>)
  measureExposure(lightLevel, elapsedTime);
 80a02e8:	4607      	mov	r7, r0
  if (exposureForDay == true) { timeSinceLastExposure += elapsedTime; }
 80a02ea:	7823      	ldrb	r3, [r4, #0]
 80a02ec:	4e4f      	ldr	r6, [pc, #316]	; (80a042c <loop+0x174>)
 80a02ee:	b123      	cbz	r3, 80a02fa <loop+0x42>
 80a02f0:	6830      	ldr	r0, [r6, #0]
 80a02f2:	4629      	mov	r1, r5
 80a02f4:	f001 fd3e 	bl	80a1d74 <__addsf3>
 80a02f8:	6030      	str	r0, [r6, #0]
  if ( lightLevel > LIGHT_THRESHOLD ){
 80a02fa:	f8df 8164 	ldr.w	r8, [pc, #356]	; 80a0460 <loop+0x1a8>
 80a02fe:	4638      	mov	r0, r7
 80a0300:	494b      	ldr	r1, [pc, #300]	; (80a0430 <loop+0x178>)
 80a0302:	f898 9000 	ldrb.w	r9, [r8]
 80a0306:	f001 fff9 	bl	80a22fc <__aeabi_fcmpgt>
 80a030a:	2800      	cmp	r0, #0
 80a030c:	d067      	beq.n	80a03de <loop+0x126>
    if ( gettingLight == false )
 80a030e:	4f49      	ldr	r7, [pc, #292]	; (80a0434 <loop+0x17c>)
 80a0310:	f1b9 0f00 	cmp.w	r9, #0
 80a0314:	d15d      	bne.n	80a03d2 <loop+0x11a>
      lastUpdateOn = writeWarning("Getting light", lastUpdateOn);
 80a0316:	4d48      	ldr	r5, [pc, #288]	; (80a0438 <loop+0x180>)
 80a0318:	4948      	ldr	r1, [pc, #288]	; (80a043c <loop+0x184>)
 80a031a:	4668      	mov	r0, sp
 80a031c:	f000 faa8 	bl	80a0870 <_ZN6StringC1EPKc>
 80a0320:	6829      	ldr	r1, [r5, #0]
 80a0322:	4668      	mov	r0, sp
 80a0324:	f7ff ff56 	bl	80a01d4 <_Z12writeWarning6Stringf>
 80a0328:	6028      	str	r0, [r5, #0]
 80a032a:	4668      	mov	r0, sp
 80a032c:	f000 fa56 	bl	80a07dc <_ZN6StringD1Ev>
    }
 80a0330:	4943      	ldr	r1, [pc, #268]	; (80a0440 <loop+0x188>)
 80a0332:	4668      	mov	r0, sp
 80a0334:	f000 fa9c 	bl	80a0870 <_ZN6StringC1EPKc>
 80a0338:	4668      	mov	r0, sp
 80a033a:	f7ff ff2a 	bl	80a0192 <_Z10writeEvent6String>
 80a033e:	4668      	mov	r0, sp
 80a0340:	f000 fa4c 	bl	80a07dc <_ZN6StringD1Ev>
    {
 80a0344:	4d3f      	ldr	r5, [pc, #252]	; (80a0444 <loop+0x18c>)
 80a0346:	6838      	ldr	r0, [r7, #0]
 80a0348:	6829      	ldr	r1, [r5, #0]
 80a034a:	f001 fd13 	bl	80a1d74 <__addsf3>
 80a034e:	493e      	ldr	r1, [pc, #248]	; (80a0448 <loop+0x190>)
 80a0350:	f001 ffca 	bl	80a22e8 <__aeabi_fcmpge>
 80a0354:	b388      	cbz	r0, 80a03ba <loop+0x102>
        exposureForDay = true;
 80a0356:	7823      	ldrb	r3, [r4, #0]
 80a0358:	f8df 8108 	ldr.w	r8, [pc, #264]	; 80a0464 <loop+0x1ac>
 80a035c:	b973      	cbnz	r3, 80a037c <loop+0xc4>
        writeEvent("Reached exposure for the day");
 80a035e:	2301      	movs	r3, #1
        lastWarning = 0;
 80a0360:	493a      	ldr	r1, [pc, #232]	; (80a044c <loop+0x194>)
 80a0362:	4668      	mov	r0, sp
        writeEvent("Reached exposure for the day");
 80a0364:	7023      	strb	r3, [r4, #0]
        lastWarning = 0;
 80a0366:	f000 fa83 	bl	80a0870 <_ZN6StringC1EPKc>
 80a036a:	4668      	mov	r0, sp
 80a036c:	f7ff ff11 	bl	80a0192 <_Z10writeEvent6String>
 80a0370:	4668      	mov	r0, sp
 80a0372:	f000 fa33 	bl	80a07dc <_ZN6StringD1Ev>
      }  
 80a0376:	2300      	movs	r3, #0
 80a0378:	f8c8 3000 	str.w	r3, [r8]
      // if ( (millis() - lastWarning ) > MESSAGE_INTERVAL ){
 80a037c:	6829      	ldr	r1, [r5, #0]
 80a037e:	6838      	ldr	r0, [r7, #0]
 80a0380:	f001 fcf8 	bl	80a1d74 <__addsf3>
 80a0384:	f001 f950 	bl	80a1628 <__aeabi_f2d>
 80a0388:	4602      	mov	r2, r0
 80a038a:	460b      	mov	r3, r1
 80a038c:	a122      	add	r1, pc, #136	; (adr r1, 80a0418 <loop+0x160>)
 80a038e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a0392:	f000 ffe9 	bl	80a1368 <__aeabi_dsub>
 80a0396:	f001 fc97 	bl	80a1cc8 <__aeabi_d2f>
    }
 80a039a:	492d      	ldr	r1, [pc, #180]	; (80a0450 <loop+0x198>)
      // if ( (millis() - lastWarning ) > MESSAGE_INTERVAL ){
 80a039c:	6028      	str	r0, [r5, #0]
    }
 80a039e:	4668      	mov	r0, sp
 80a03a0:	f000 fa66 	bl	80a0870 <_ZN6StringC1EPKc>
 80a03a4:	4668      	mov	r0, sp
 80a03a6:	f8d8 2000 	ldr.w	r2, [r8]
 80a03aa:	6829      	ldr	r1, [r5, #0]
 80a03ac:	f7ff ff36 	bl	80a021c <_Z12writeWarning6Stringff>
 80a03b0:	f8c8 0000 	str.w	r0, [r8]
    }
 80a03b4:	4668      	mov	r0, sp
 80a03b6:	f000 fa11 	bl	80a07dc <_ZN6StringD1Ev>
  // if it has been 24 hours since exposure for day was reached, reset counter and set exposureForDay to faslse
  if (timeSinceLastExposure >= 24*60*60*1000)
  { 
 80a03ba:	4926      	ldr	r1, [pc, #152]	; (80a0454 <loop+0x19c>)
 80a03bc:	6830      	ldr	r0, [r6, #0]
 80a03be:	f001 ff93 	bl	80a22e8 <__aeabi_fcmpge>
 80a03c2:	b118      	cbz	r0, 80a03cc <loop+0x114>
    timeSinceLastExposure = 0;
    exposureForDay = false;
 80a03c4:	2300      	movs	r3, #0
 80a03c6:	6033      	str	r3, [r6, #0]
  }
 80a03c8:	2300      	movs	r3, #0
 80a03ca:	7023      	strb	r3, [r4, #0]
 80a03cc:	b005      	add	sp, #20
 80a03ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } 
 80a03d2:	6838      	ldr	r0, [r7, #0]
 80a03d4:	4629      	mov	r1, r5
 80a03d6:	f001 fccd 	bl	80a1d74 <__addsf3>
 80a03da:	6038      	str	r0, [r7, #0]
 80a03dc:	e7b2      	b.n	80a0344 <loop+0x8c>
      gettingLight = false;
 80a03de:	f1b9 0f00 	cmp.w	r9, #0
 80a03e2:	d0ea      	beq.n	80a03ba <loop+0x102>
      lastUpdateOff = writeWarning("Current exposure time:", exposureTime,  lastUpdateOff);
 80a03e4:	4f13      	ldr	r7, [pc, #76]	; (80a0434 <loop+0x17c>)
 80a03e6:	491c      	ldr	r1, [pc, #112]	; (80a0458 <loop+0x1a0>)
      // alert user and  update how much exposure terrarium has gotten so far.
 80a03e8:	f888 0000 	strb.w	r0, [r8]
      lastUpdateOff = writeWarning("Current exposure time:", exposureTime,  lastUpdateOff);
 80a03ec:	4668      	mov	r0, sp
 80a03ee:	f000 fa3f 	bl	80a0870 <_ZN6StringC1EPKc>
 80a03f2:	6839      	ldr	r1, [r7, #0]
 80a03f4:	4668      	mov	r0, sp
 80a03f6:	f7ff fed5 	bl	80a01a4 <_Z10writeEvent6Stringf>
    }
 80a03fa:	4d18      	ldr	r5, [pc, #96]	; (80a045c <loop+0x1a4>)
      lastUpdateOff = writeWarning("Current exposure time:", exposureTime,  lastUpdateOff);
 80a03fc:	4668      	mov	r0, sp
 80a03fe:	f000 f9ed 	bl	80a07dc <_ZN6StringD1Ev>
    }
 80a0402:	4915      	ldr	r1, [pc, #84]	; (80a0458 <loop+0x1a0>)
 80a0404:	4668      	mov	r0, sp
 80a0406:	f000 fa33 	bl	80a0870 <_ZN6StringC1EPKc>
 80a040a:	4668      	mov	r0, sp
 80a040c:	682a      	ldr	r2, [r5, #0]
 80a040e:	6839      	ldr	r1, [r7, #0]
 80a0410:	f7ff ff04 	bl	80a021c <_Z12writeWarning6Stringff>
 80a0414:	6028      	str	r0, [r5, #0]
 80a0416:	e7cd      	b.n	80a03b4 <loop+0xfc>
 80a0418:	00000000 	.word	0x00000000
 80a041c:	40c19400 	.word	0x40c19400
 80a0420:	20000094 	.word	0x20000094
 80a0424:	2000008c 	.word	0x2000008c
 80a0428:	20000074 	.word	0x20000074
 80a042c:	20000098 	.word	0x20000098
 80a0430:	44480000 	.word	0x44480000
 80a0434:	20000078 	.word	0x20000078
 80a0438:	20000084 	.word	0x20000084
 80a043c:	080a24b1 	.word	0x080a24b1
 80a0440:	080a24bf 	.word	0x080a24bf
 80a0444:	20000070 	.word	0x20000070
 80a0448:	460ca000 	.word	0x460ca000
 80a044c:	080a24c4 	.word	0x080a24c4
 80a0450:	080a24e1 	.word	0x080a24e1
 80a0454:	4ca4cb80 	.word	0x4ca4cb80
 80a0458:	080a24f5 	.word	0x080a24f5
 80a045c:	20000080 	.word	0x20000080
 80a0460:	2000007c 	.word	0x2000007c
 80a0464:	20000088 	.word	0x20000088

080a0468 <_GLOBAL__sub_I_sensor>:
 80a0468:	b508      	push	{r3, lr}
BH1750 sensor(0x23, Wire);
 80a046a:	f000 ff51 	bl	80a1310 <_Z19__fetch_global_Wirev>
 80a046e:	2123      	movs	r1, #35	; 0x23
 80a0470:	4602      	mov	r2, r0
 80a0472:	4804      	ldr	r0, [pc, #16]	; (80a0484 <_GLOBAL__sub_I_sensor+0x1c>)
 80a0474:	f7ff fe1d 	bl	80a00b2 <_ZN6BH1750C1EhR7TwoWire>
 80a0478:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
SYSTEM_THREAD(ENABLED);
 80a047c:	2100      	movs	r1, #0
 80a047e:	2001      	movs	r0, #1
 80a0480:	f000 b8f6 	b.w	80a0670 <system_thread_set_state>
 80a0484:	2000008c 	.word	0x2000008c

080a0488 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0488:	b508      	push	{r3, lr}
 80a048a:	4b02      	ldr	r3, [pc, #8]	; (80a0494 <HAL_RNG_GetRandomNumber+0xc>)
 80a048c:	681b      	ldr	r3, [r3, #0]
 80a048e:	685b      	ldr	r3, [r3, #4]
 80a0490:	9301      	str	r3, [sp, #4]
 80a0492:	bd08      	pop	{r3, pc}
 80a0494:	0806019c 	.word	0x0806019c

080a0498 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0498:	b508      	push	{r3, lr}
 80a049a:	4b02      	ldr	r3, [pc, #8]	; (80a04a4 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a049c:	681b      	ldr	r3, [r3, #0]
 80a049e:	695b      	ldr	r3, [r3, #20]
 80a04a0:	9301      	str	r3, [sp, #4]
 80a04a2:	bd08      	pop	{r3, pc}
 80a04a4:	0806019c 	.word	0x0806019c

080a04a8 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a04a8:	b508      	push	{r3, lr}
 80a04aa:	4b02      	ldr	r3, [pc, #8]	; (80a04b4 <hal_usart_init+0xc>)
 80a04ac:	681b      	ldr	r3, [r3, #0]
 80a04ae:	699b      	ldr	r3, [r3, #24]
 80a04b0:	9301      	str	r3, [sp, #4]
 80a04b2:	bd08      	pop	{r3, pc}
 80a04b4:	080601c4 	.word	0x080601c4

080a04b8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a04b8:	b508      	push	{r3, lr}
 80a04ba:	4b02      	ldr	r3, [pc, #8]	; (80a04c4 <hal_usart_write+0xc>)
 80a04bc:	681b      	ldr	r3, [r3, #0]
 80a04be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a04c0:	9301      	str	r3, [sp, #4]
 80a04c2:	bd08      	pop	{r3, pc}
 80a04c4:	080601c4 	.word	0x080601c4

080a04c8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a04c8:	b508      	push	{r3, lr}
 80a04ca:	4b02      	ldr	r3, [pc, #8]	; (80a04d4 <hal_usart_available+0xc>)
 80a04cc:	681b      	ldr	r3, [r3, #0]
 80a04ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a04d0:	9301      	str	r3, [sp, #4]
 80a04d2:	bd08      	pop	{r3, pc}
 80a04d4:	080601c4 	.word	0x080601c4

080a04d8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a04d8:	b508      	push	{r3, lr}
 80a04da:	4b02      	ldr	r3, [pc, #8]	; (80a04e4 <hal_usart_read+0xc>)
 80a04dc:	681b      	ldr	r3, [r3, #0]
 80a04de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a04e0:	9301      	str	r3, [sp, #4]
 80a04e2:	bd08      	pop	{r3, pc}
 80a04e4:	080601c4 	.word	0x080601c4

080a04e8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a04e8:	b508      	push	{r3, lr}
 80a04ea:	4b02      	ldr	r3, [pc, #8]	; (80a04f4 <hal_usart_peek+0xc>)
 80a04ec:	681b      	ldr	r3, [r3, #0]
 80a04ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a04f0:	9301      	str	r3, [sp, #4]
 80a04f2:	bd08      	pop	{r3, pc}
 80a04f4:	080601c4 	.word	0x080601c4

080a04f8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a04f8:	b508      	push	{r3, lr}
 80a04fa:	4b02      	ldr	r3, [pc, #8]	; (80a0504 <hal_usart_flush+0xc>)
 80a04fc:	681b      	ldr	r3, [r3, #0]
 80a04fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0500:	9301      	str	r3, [sp, #4]
 80a0502:	bd08      	pop	{r3, pc}
 80a0504:	080601c4 	.word	0x080601c4

080a0508 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0508:	b508      	push	{r3, lr}
 80a050a:	4b02      	ldr	r3, [pc, #8]	; (80a0514 <hal_usart_available_data_for_write+0xc>)
 80a050c:	681b      	ldr	r3, [r3, #0]
 80a050e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0510:	9301      	str	r3, [sp, #4]
 80a0512:	bd08      	pop	{r3, pc}
 80a0514:	080601c4 	.word	0x080601c4

080a0518 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a0518:	b508      	push	{r3, lr}
 80a051a:	4b02      	ldr	r3, [pc, #8]	; (80a0524 <hal_i2c_begin+0xc>)
 80a051c:	681b      	ldr	r3, [r3, #0]
 80a051e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0520:	9301      	str	r3, [sp, #4]
 80a0522:	bd08      	pop	{r3, pc}
 80a0524:	080601ac 	.word	0x080601ac

080a0528 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a0528:	b508      	push	{r3, lr}
 80a052a:	4b02      	ldr	r3, [pc, #8]	; (80a0534 <hal_i2c_begin_transmission+0xc>)
 80a052c:	681b      	ldr	r3, [r3, #0]
 80a052e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0530:	9301      	str	r3, [sp, #4]
 80a0532:	bd08      	pop	{r3, pc}
 80a0534:	080601ac 	.word	0x080601ac

080a0538 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a0538:	b508      	push	{r3, lr}
 80a053a:	4b02      	ldr	r3, [pc, #8]	; (80a0544 <hal_i2c_end_transmission+0xc>)
 80a053c:	681b      	ldr	r3, [r3, #0]
 80a053e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a0540:	9301      	str	r3, [sp, #4]
 80a0542:	bd08      	pop	{r3, pc}
 80a0544:	080601ac 	.word	0x080601ac

080a0548 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0548:	b508      	push	{r3, lr}
 80a054a:	4b02      	ldr	r3, [pc, #8]	; (80a0554 <hal_i2c_write+0xc>)
 80a054c:	681b      	ldr	r3, [r3, #0]
 80a054e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0550:	9301      	str	r3, [sp, #4]
 80a0552:	bd08      	pop	{r3, pc}
 80a0554:	080601ac 	.word	0x080601ac

080a0558 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a0558:	b508      	push	{r3, lr}
 80a055a:	4b02      	ldr	r3, [pc, #8]	; (80a0564 <hal_i2c_available+0xc>)
 80a055c:	681b      	ldr	r3, [r3, #0]
 80a055e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0560:	9301      	str	r3, [sp, #4]
 80a0562:	bd08      	pop	{r3, pc}
 80a0564:	080601ac 	.word	0x080601ac

080a0568 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a0568:	b508      	push	{r3, lr}
 80a056a:	4b02      	ldr	r3, [pc, #8]	; (80a0574 <hal_i2c_read+0xc>)
 80a056c:	681b      	ldr	r3, [r3, #0]
 80a056e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0570:	9301      	str	r3, [sp, #4]
 80a0572:	bd08      	pop	{r3, pc}
 80a0574:	080601ac 	.word	0x080601ac

080a0578 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0578:	b508      	push	{r3, lr}
 80a057a:	4b02      	ldr	r3, [pc, #8]	; (80a0584 <hal_i2c_peek+0xc>)
 80a057c:	681b      	ldr	r3, [r3, #0]
 80a057e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0580:	9301      	str	r3, [sp, #4]
 80a0582:	bd08      	pop	{r3, pc}
 80a0584:	080601ac 	.word	0x080601ac

080a0588 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a0588:	b508      	push	{r3, lr}
 80a058a:	4b02      	ldr	r3, [pc, #8]	; (80a0594 <hal_i2c_flush+0xc>)
 80a058c:	681b      	ldr	r3, [r3, #0]
 80a058e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0590:	9301      	str	r3, [sp, #4]
 80a0592:	bd08      	pop	{r3, pc}
 80a0594:	080601ac 	.word	0x080601ac

080a0598 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a0598:	b508      	push	{r3, lr}
 80a059a:	4b02      	ldr	r3, [pc, #8]	; (80a05a4 <hal_i2c_is_enabled+0xc>)
 80a059c:	681b      	ldr	r3, [r3, #0]
 80a059e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a05a0:	9301      	str	r3, [sp, #4]
 80a05a2:	bd08      	pop	{r3, pc}
 80a05a4:	080601ac 	.word	0x080601ac

080a05a8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a05a8:	b508      	push	{r3, lr}
 80a05aa:	4b03      	ldr	r3, [pc, #12]	; (80a05b8 <hal_i2c_init+0x10>)
 80a05ac:	681b      	ldr	r3, [r3, #0]
 80a05ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a05b2:	9301      	str	r3, [sp, #4]
 80a05b4:	bd08      	pop	{r3, pc}
 80a05b6:	0000      	.short	0x0000
 80a05b8:	080601ac 	.word	0x080601ac

080a05bc <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 80a05bc:	b508      	push	{r3, lr}
 80a05be:	4b03      	ldr	r3, [pc, #12]	; (80a05cc <hal_i2c_request_ex+0x10>)
 80a05c0:	681b      	ldr	r3, [r3, #0]
 80a05c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a05c6:	9301      	str	r3, [sp, #4]
 80a05c8:	bd08      	pop	{r3, pc}
 80a05ca:	0000      	.short	0x0000
 80a05cc:	080601ac 	.word	0x080601ac

080a05d0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a05d0:	b508      	push	{r3, lr}
 80a05d2:	4b02      	ldr	r3, [pc, #8]	; (80a05dc <HAL_USB_USART_Init+0xc>)
 80a05d4:	681b      	ldr	r3, [r3, #0]
 80a05d6:	681b      	ldr	r3, [r3, #0]
 80a05d8:	9301      	str	r3, [sp, #4]
 80a05da:	bd08      	pop	{r3, pc}
 80a05dc:	080601d8 	.word	0x080601d8

080a05e0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a05e0:	b508      	push	{r3, lr}
 80a05e2:	4b02      	ldr	r3, [pc, #8]	; (80a05ec <HAL_USB_USART_Begin+0xc>)
 80a05e4:	681b      	ldr	r3, [r3, #0]
 80a05e6:	685b      	ldr	r3, [r3, #4]
 80a05e8:	9301      	str	r3, [sp, #4]
 80a05ea:	bd08      	pop	{r3, pc}
 80a05ec:	080601d8 	.word	0x080601d8

080a05f0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a05f0:	b508      	push	{r3, lr}
 80a05f2:	4b02      	ldr	r3, [pc, #8]	; (80a05fc <HAL_USB_USART_Available_Data+0xc>)
 80a05f4:	681b      	ldr	r3, [r3, #0]
 80a05f6:	691b      	ldr	r3, [r3, #16]
 80a05f8:	9301      	str	r3, [sp, #4]
 80a05fa:	bd08      	pop	{r3, pc}
 80a05fc:	080601d8 	.word	0x080601d8

080a0600 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0600:	b508      	push	{r3, lr}
 80a0602:	4b02      	ldr	r3, [pc, #8]	; (80a060c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0604:	681b      	ldr	r3, [r3, #0]
 80a0606:	695b      	ldr	r3, [r3, #20]
 80a0608:	9301      	str	r3, [sp, #4]
 80a060a:	bd08      	pop	{r3, pc}
 80a060c:	080601d8 	.word	0x080601d8

080a0610 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0610:	b508      	push	{r3, lr}
 80a0612:	4b02      	ldr	r3, [pc, #8]	; (80a061c <HAL_USB_USART_Receive_Data+0xc>)
 80a0614:	681b      	ldr	r3, [r3, #0]
 80a0616:	699b      	ldr	r3, [r3, #24]
 80a0618:	9301      	str	r3, [sp, #4]
 80a061a:	bd08      	pop	{r3, pc}
 80a061c:	080601d8 	.word	0x080601d8

080a0620 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0620:	b508      	push	{r3, lr}
 80a0622:	4b02      	ldr	r3, [pc, #8]	; (80a062c <HAL_USB_USART_Send_Data+0xc>)
 80a0624:	681b      	ldr	r3, [r3, #0]
 80a0626:	69db      	ldr	r3, [r3, #28]
 80a0628:	9301      	str	r3, [sp, #4]
 80a062a:	bd08      	pop	{r3, pc}
 80a062c:	080601d8 	.word	0x080601d8

080a0630 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0630:	b508      	push	{r3, lr}
 80a0632:	4b02      	ldr	r3, [pc, #8]	; (80a063c <HAL_USB_USART_Flush_Data+0xc>)
 80a0634:	681b      	ldr	r3, [r3, #0]
 80a0636:	6a1b      	ldr	r3, [r3, #32]
 80a0638:	9301      	str	r3, [sp, #4]
 80a063a:	bd08      	pop	{r3, pc}
 80a063c:	080601d8 	.word	0x080601d8

080a0640 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0640:	b508      	push	{r3, lr}
 80a0642:	4b02      	ldr	r3, [pc, #8]	; (80a064c <inet_gethostbyname+0xc>)
 80a0644:	681b      	ldr	r3, [r3, #0]
 80a0646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0648:	9301      	str	r3, [sp, #4]
 80a064a:	bd08      	pop	{r3, pc}
 80a064c:	080601c0 	.word	0x080601c0

080a0650 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0650:	b508      	push	{r3, lr}
 80a0652:	4b02      	ldr	r3, [pc, #8]	; (80a065c <set_system_mode+0xc>)
 80a0654:	681b      	ldr	r3, [r3, #0]
 80a0656:	685b      	ldr	r3, [r3, #4]
 80a0658:	9301      	str	r3, [sp, #4]
 80a065a:	bd08      	pop	{r3, pc}
 80a065c:	080601a4 	.word	0x080601a4

080a0660 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0660:	b508      	push	{r3, lr}
 80a0662:	4b02      	ldr	r3, [pc, #8]	; (80a066c <system_delay_ms+0xc>)
 80a0664:	681b      	ldr	r3, [r3, #0]
 80a0666:	695b      	ldr	r3, [r3, #20]
 80a0668:	9301      	str	r3, [sp, #4]
 80a066a:	bd08      	pop	{r3, pc}
 80a066c:	080601a4 	.word	0x080601a4

080a0670 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a0670:	b508      	push	{r3, lr}
 80a0672:	4b02      	ldr	r3, [pc, #8]	; (80a067c <system_thread_set_state+0xc>)
 80a0674:	681b      	ldr	r3, [r3, #0]
 80a0676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0678:	9301      	str	r3, [sp, #4]
 80a067a:	bd08      	pop	{r3, pc}
 80a067c:	080601a4 	.word	0x080601a4

080a0680 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0680:	b508      	push	{r3, lr}
 80a0682:	4b03      	ldr	r3, [pc, #12]	; (80a0690 <system_ctrl_set_app_request_handler+0x10>)
 80a0684:	681b      	ldr	r3, [r3, #0]
 80a0686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a068a:	9301      	str	r3, [sp, #4]
 80a068c:	bd08      	pop	{r3, pc}
 80a068e:	0000      	.short	0x0000
 80a0690:	080601a4 	.word	0x080601a4

080a0694 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0694:	b508      	push	{r3, lr}
 80a0696:	4b03      	ldr	r3, [pc, #12]	; (80a06a4 <system_ctrl_set_result+0x10>)
 80a0698:	681b      	ldr	r3, [r3, #0]
 80a069a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a069e:	9301      	str	r3, [sp, #4]
 80a06a0:	bd08      	pop	{r3, pc}
 80a06a2:	0000      	.short	0x0000
 80a06a4:	080601a4 	.word	0x080601a4

080a06a8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a06a8:	b508      	push	{r3, lr}
 80a06aa:	4b02      	ldr	r3, [pc, #8]	; (80a06b4 <network_connect+0xc>)
 80a06ac:	681b      	ldr	r3, [r3, #0]
 80a06ae:	685b      	ldr	r3, [r3, #4]
 80a06b0:	9301      	str	r3, [sp, #4]
 80a06b2:	bd08      	pop	{r3, pc}
 80a06b4:	080601c8 	.word	0x080601c8

080a06b8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a06b8:	b508      	push	{r3, lr}
 80a06ba:	4b02      	ldr	r3, [pc, #8]	; (80a06c4 <network_connecting+0xc>)
 80a06bc:	681b      	ldr	r3, [r3, #0]
 80a06be:	689b      	ldr	r3, [r3, #8]
 80a06c0:	9301      	str	r3, [sp, #4]
 80a06c2:	bd08      	pop	{r3, pc}
 80a06c4:	080601c8 	.word	0x080601c8

080a06c8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a06c8:	b508      	push	{r3, lr}
 80a06ca:	4b02      	ldr	r3, [pc, #8]	; (80a06d4 <network_disconnect+0xc>)
 80a06cc:	681b      	ldr	r3, [r3, #0]
 80a06ce:	68db      	ldr	r3, [r3, #12]
 80a06d0:	9301      	str	r3, [sp, #4]
 80a06d2:	bd08      	pop	{r3, pc}
 80a06d4:	080601c8 	.word	0x080601c8

080a06d8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a06d8:	b508      	push	{r3, lr}
 80a06da:	4b02      	ldr	r3, [pc, #8]	; (80a06e4 <network_ready+0xc>)
 80a06dc:	681b      	ldr	r3, [r3, #0]
 80a06de:	691b      	ldr	r3, [r3, #16]
 80a06e0:	9301      	str	r3, [sp, #4]
 80a06e2:	bd08      	pop	{r3, pc}
 80a06e4:	080601c8 	.word	0x080601c8

080a06e8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a06e8:	b508      	push	{r3, lr}
 80a06ea:	4b02      	ldr	r3, [pc, #8]	; (80a06f4 <network_on+0xc>)
 80a06ec:	681b      	ldr	r3, [r3, #0]
 80a06ee:	695b      	ldr	r3, [r3, #20]
 80a06f0:	9301      	str	r3, [sp, #4]
 80a06f2:	bd08      	pop	{r3, pc}
 80a06f4:	080601c8 	.word	0x080601c8

080a06f8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a06f8:	b508      	push	{r3, lr}
 80a06fa:	4b02      	ldr	r3, [pc, #8]	; (80a0704 <network_off+0xc>)
 80a06fc:	681b      	ldr	r3, [r3, #0]
 80a06fe:	699b      	ldr	r3, [r3, #24]
 80a0700:	9301      	str	r3, [sp, #4]
 80a0702:	bd08      	pop	{r3, pc}
 80a0704:	080601c8 	.word	0x080601c8

080a0708 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0708:	b508      	push	{r3, lr}
 80a070a:	4b02      	ldr	r3, [pc, #8]	; (80a0714 <network_listen+0xc>)
 80a070c:	681b      	ldr	r3, [r3, #0]
 80a070e:	69db      	ldr	r3, [r3, #28]
 80a0710:	9301      	str	r3, [sp, #4]
 80a0712:	bd08      	pop	{r3, pc}
 80a0714:	080601c8 	.word	0x080601c8

080a0718 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0718:	b508      	push	{r3, lr}
 80a071a:	4b02      	ldr	r3, [pc, #8]	; (80a0724 <network_listening+0xc>)
 80a071c:	681b      	ldr	r3, [r3, #0]
 80a071e:	6a1b      	ldr	r3, [r3, #32]
 80a0720:	9301      	str	r3, [sp, #4]
 80a0722:	bd08      	pop	{r3, pc}
 80a0724:	080601c8 	.word	0x080601c8

080a0728 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0728:	b508      	push	{r3, lr}
 80a072a:	4b02      	ldr	r3, [pc, #8]	; (80a0734 <network_set_listen_timeout+0xc>)
 80a072c:	681b      	ldr	r3, [r3, #0]
 80a072e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0730:	9301      	str	r3, [sp, #4]
 80a0732:	bd08      	pop	{r3, pc}
 80a0734:	080601c8 	.word	0x080601c8

080a0738 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0738:	b508      	push	{r3, lr}
 80a073a:	4b02      	ldr	r3, [pc, #8]	; (80a0744 <network_get_listen_timeout+0xc>)
 80a073c:	681b      	ldr	r3, [r3, #0]
 80a073e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0740:	9301      	str	r3, [sp, #4]
 80a0742:	bd08      	pop	{r3, pc}
 80a0744:	080601c8 	.word	0x080601c8

080a0748 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a0748:	b508      	push	{r3, lr}
 80a074a:	4b02      	ldr	r3, [pc, #8]	; (80a0754 <network_is_on+0xc>)
 80a074c:	681b      	ldr	r3, [r3, #0]
 80a074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0750:	9301      	str	r3, [sp, #4]
 80a0752:	bd08      	pop	{r3, pc}
 80a0754:	080601c8 	.word	0x080601c8

080a0758 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a0758:	b508      	push	{r3, lr}
 80a075a:	4b02      	ldr	r3, [pc, #8]	; (80a0764 <network_is_off+0xc>)
 80a075c:	681b      	ldr	r3, [r3, #0]
 80a075e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0760:	9301      	str	r3, [sp, #4]
 80a0762:	bd08      	pop	{r3, pc}
 80a0764:	080601c8 	.word	0x080601c8

080a0768 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0768:	b508      	push	{r3, lr}
 80a076a:	4b02      	ldr	r3, [pc, #8]	; (80a0774 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a076c:	681b      	ldr	r3, [r3, #0]
 80a076e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0770:	9301      	str	r3, [sp, #4]
 80a0772:	bd08      	pop	{r3, pc}
 80a0774:	080601cc 	.word	0x080601cc

080a0778 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0778:	b508      	push	{r3, lr}
 80a077a:	4b02      	ldr	r3, [pc, #8]	; (80a0784 <malloc+0xc>)
 80a077c:	681b      	ldr	r3, [r3, #0]
 80a077e:	681b      	ldr	r3, [r3, #0]
 80a0780:	9301      	str	r3, [sp, #4]
 80a0782:	bd08      	pop	{r3, pc}
 80a0784:	080601a0 	.word	0x080601a0

080a0788 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0788:	b508      	push	{r3, lr}
 80a078a:	4b02      	ldr	r3, [pc, #8]	; (80a0794 <free+0xc>)
 80a078c:	681b      	ldr	r3, [r3, #0]
 80a078e:	685b      	ldr	r3, [r3, #4]
 80a0790:	9301      	str	r3, [sp, #4]
 80a0792:	bd08      	pop	{r3, pc}
 80a0794:	080601a0 	.word	0x080601a0

080a0798 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0798:	b508      	push	{r3, lr}
 80a079a:	4b02      	ldr	r3, [pc, #8]	; (80a07a4 <realloc+0xc>)
 80a079c:	681b      	ldr	r3, [r3, #0]
 80a079e:	689b      	ldr	r3, [r3, #8]
 80a07a0:	9301      	str	r3, [sp, #4]
 80a07a2:	bd08      	pop	{r3, pc}
 80a07a4:	080601a0 	.word	0x080601a0

080a07a8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a07a8:	b508      	push	{r3, lr}
 80a07aa:	4b02      	ldr	r3, [pc, #8]	; (80a07b4 <newlib_impure_ptr_callback+0xc>)
 80a07ac:	681b      	ldr	r3, [r3, #0]
 80a07ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a07b0:	9301      	str	r3, [sp, #4]
 80a07b2:	bd08      	pop	{r3, pc}
 80a07b4:	080601a0 	.word	0x080601a0

080a07b8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a07b8:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a07ba:	2000      	movs	r0, #0
 80a07bc:	4b04      	ldr	r3, [pc, #16]	; (80a07d0 <_GLOBAL__sub_I_System+0x18>)
 80a07be:	601a      	str	r2, [r3, #0]
 80a07c0:	4b04      	ldr	r3, [pc, #16]	; (80a07d4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a07c2:	4a05      	ldr	r2, [pc, #20]	; (80a07d8 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a07c4:	6018      	str	r0, [r3, #0]
 80a07c6:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 80a07c8:	7198      	strb	r0, [r3, #6]
 80a07ca:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a07cc:	f7ff bf40 	b.w	80a0650 <set_system_mode>
 80a07d0:	200000a8 	.word	0x200000a8
 80a07d4:	2000009c 	.word	0x2000009c
 80a07d8:	ffff0000 	.word	0xffff0000

080a07dc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a07dc:	b510      	push	{r4, lr}
 80a07de:	4604      	mov	r4, r0
{
	free(buffer);
 80a07e0:	6800      	ldr	r0, [r0, #0]
 80a07e2:	f7ff ffd1 	bl	80a0788 <free>
}
 80a07e6:	4620      	mov	r0, r4
 80a07e8:	bd10      	pop	{r4, pc}

080a07ea <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a07ea:	b510      	push	{r4, lr}
 80a07ec:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a07ee:	6800      	ldr	r0, [r0, #0]
 80a07f0:	b108      	cbz	r0, 80a07f6 <_ZN6String10invalidateEv+0xc>
 80a07f2:	f7ff ffc9 	bl	80a0788 <free>
	buffer = NULL;
 80a07f6:	2300      	movs	r3, #0
	capacity = len = 0;
 80a07f8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a07fc:	6023      	str	r3, [r4, #0]
}
 80a07fe:	bd10      	pop	{r4, pc}

080a0800 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0800:	b538      	push	{r3, r4, r5, lr}
 80a0802:	4604      	mov	r4, r0
 80a0804:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0806:	6800      	ldr	r0, [r0, #0]
 80a0808:	3101      	adds	r1, #1
 80a080a:	f7ff ffc5 	bl	80a0798 <realloc>
	if (newbuffer) {
 80a080e:	b110      	cbz	r0, 80a0816 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0810:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a0814:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0816:	bd38      	pop	{r3, r4, r5, pc}

080a0818 <_ZN6String7reserveEj>:
{
 80a0818:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a081a:	6803      	ldr	r3, [r0, #0]
{
 80a081c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a081e:	b123      	cbz	r3, 80a082a <_ZN6String7reserveEj+0x12>
 80a0820:	6843      	ldr	r3, [r0, #4]
 80a0822:	428b      	cmp	r3, r1
 80a0824:	d301      	bcc.n	80a082a <_ZN6String7reserveEj+0x12>
 80a0826:	2001      	movs	r0, #1
}
 80a0828:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a082a:	4620      	mov	r0, r4
 80a082c:	f7ff ffe8 	bl	80a0800 <_ZN6String12changeBufferEj>
 80a0830:	2800      	cmp	r0, #0
 80a0832:	d0f9      	beq.n	80a0828 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a0834:	68a3      	ldr	r3, [r4, #8]
 80a0836:	2b00      	cmp	r3, #0
 80a0838:	d1f5      	bne.n	80a0826 <_ZN6String7reserveEj+0xe>
 80a083a:	6822      	ldr	r2, [r4, #0]
 80a083c:	7013      	strb	r3, [r2, #0]
 80a083e:	e7f2      	b.n	80a0826 <_ZN6String7reserveEj+0xe>

080a0840 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0840:	b570      	push	{r4, r5, r6, lr}
 80a0842:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0844:	4611      	mov	r1, r2
{
 80a0846:	4604      	mov	r4, r0
 80a0848:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a084a:	f7ff ffe5 	bl	80a0818 <_ZN6String7reserveEj>
 80a084e:	b920      	cbnz	r0, 80a085a <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a0850:	4620      	mov	r0, r4
 80a0852:	f7ff ffca 	bl	80a07ea <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a0856:	4620      	mov	r0, r4
 80a0858:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a085a:	462a      	mov	r2, r5
 80a085c:	4631      	mov	r1, r6
 80a085e:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a0860:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a0862:	f001 fd5b 	bl	80a231c <memcpy>
	buffer[len] = 0;
 80a0866:	2100      	movs	r1, #0
 80a0868:	6822      	ldr	r2, [r4, #0]
 80a086a:	68a3      	ldr	r3, [r4, #8]
 80a086c:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a086e:	e7f2      	b.n	80a0856 <_ZN6String4copyEPKcj+0x16>

080a0870 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a0870:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a0872:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a0874:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a0876:	460d      	mov	r5, r1
	capacity = 0;
 80a0878:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a087c:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a087e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a0880:	b139      	cbz	r1, 80a0892 <_ZN6StringC1EPKc+0x22>
 80a0882:	4608      	mov	r0, r1
 80a0884:	f001 fd84 	bl	80a2390 <strlen>
 80a0888:	4629      	mov	r1, r5
 80a088a:	4602      	mov	r2, r0
 80a088c:	4620      	mov	r0, r4
 80a088e:	f7ff ffd7 	bl	80a0840 <_ZN6String4copyEPKcj>
}
 80a0892:	4620      	mov	r0, r4
 80a0894:	bd38      	pop	{r3, r4, r5, pc}

080a0896 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a0896:	4288      	cmp	r0, r1
{
 80a0898:	b510      	push	{r4, lr}
 80a089a:	460b      	mov	r3, r1
 80a089c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a089e:	d004      	beq.n	80a08aa <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a08a0:	6809      	ldr	r1, [r1, #0]
 80a08a2:	b121      	cbz	r1, 80a08ae <_ZN6StringaSERKS_+0x18>
 80a08a4:	689a      	ldr	r2, [r3, #8]
 80a08a6:	f7ff ffcb 	bl	80a0840 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a08aa:	4620      	mov	r0, r4
 80a08ac:	bd10      	pop	{r4, pc}
	else invalidate();
 80a08ae:	f7ff ff9c 	bl	80a07ea <_ZN6String10invalidateEv>
 80a08b2:	e7fa      	b.n	80a08aa <_ZN6StringaSERKS_+0x14>

080a08b4 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a08b4:	2300      	movs	r3, #0
String::String(const String &value)
 80a08b6:	b510      	push	{r4, lr}
 80a08b8:	4604      	mov	r4, r0
	capacity = 0;
 80a08ba:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a08be:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a08c0:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a08c2:	f7ff ffe8 	bl	80a0896 <_ZN6StringaSERKS_>
}
 80a08c6:	4620      	mov	r0, r4
 80a08c8:	bd10      	pop	{r4, pc}

080a08ca <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a08ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a08cc:	4606      	mov	r6, r0
 80a08ce:	460d      	mov	r5, r1
  size_t n = 0;
 80a08d0:	2400      	movs	r4, #0
 80a08d2:	188f      	adds	r7, r1, r2
  while (size--) {
 80a08d4:	42bd      	cmp	r5, r7
 80a08d6:	d00c      	beq.n	80a08f2 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a08d8:	6833      	ldr	r3, [r6, #0]
 80a08da:	4630      	mov	r0, r6
 80a08dc:	689b      	ldr	r3, [r3, #8]
 80a08de:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a08e2:	4798      	blx	r3
     if (chunk>=0)
 80a08e4:	1e03      	subs	r3, r0, #0
 80a08e6:	db01      	blt.n	80a08ec <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a08e8:	441c      	add	r4, r3
  while (size--) {
 80a08ea:	e7f3      	b.n	80a08d4 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a08ec:	2c00      	cmp	r4, #0
 80a08ee:	bf08      	it	eq
 80a08f0:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a08f2:	4620      	mov	r0, r4
 80a08f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a08f6 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a08f6:	b570      	push	{r4, r5, r6, lr}
 80a08f8:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a08fa:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a08fc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a08fe:	b149      	cbz	r1, 80a0914 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0900:	f001 fd46 	bl	80a2390 <strlen>
 80a0904:	682b      	ldr	r3, [r5, #0]
 80a0906:	4602      	mov	r2, r0
 80a0908:	4621      	mov	r1, r4
 80a090a:	4628      	mov	r0, r5
    }
 80a090c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a0910:	68db      	ldr	r3, [r3, #12]
 80a0912:	4718      	bx	r3
    }
 80a0914:	bd70      	pop	{r4, r5, r6, pc}

080a0916 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a0916:	b508      	push	{r3, lr}
  return write(str);
 80a0918:	f7ff ffed 	bl	80a08f6 <_ZN5Print5writeEPKc>
}
 80a091c:	bd08      	pop	{r3, pc}

080a091e <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a091e:	6803      	ldr	r3, [r0, #0]
 80a0920:	689b      	ldr	r3, [r3, #8]
 80a0922:	4718      	bx	r3

080a0924 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0924:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0926:	210d      	movs	r1, #13
{
 80a0928:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a092a:	f7ff fff8 	bl	80a091e <_ZN5Print5printEc>
  n += print('\n');
 80a092e:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a0930:	4604      	mov	r4, r0
  n += print('\n');
 80a0932:	4628      	mov	r0, r5
 80a0934:	f7ff fff3 	bl	80a091e <_ZN5Print5printEc>
  return n;
}
 80a0938:	4420      	add	r0, r4
 80a093a:	bd38      	pop	{r3, r4, r5, pc}

080a093c <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a093c:	b538      	push	{r3, r4, r5, lr}
 80a093e:	4605      	mov	r5, r0
  return write(str);
 80a0940:	f7ff ffd9 	bl	80a08f6 <_ZN5Print5writeEPKc>
 80a0944:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a0946:	4628      	mov	r0, r5
 80a0948:	f7ff ffec 	bl	80a0924 <_ZN5Print7printlnEv>
  return n;
}
 80a094c:	4420      	add	r0, r4
 80a094e:	bd38      	pop	{r3, r4, r5, pc}

080a0950 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0950:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0952:	2a01      	cmp	r2, #1
 80a0954:	bf98      	it	ls
 80a0956:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0958:	b530      	push	{r4, r5, lr}
 80a095a:	b08b      	sub	sp, #44	; 0x2c
 80a095c:	460c      	mov	r4, r1
  *str = '\0';
 80a095e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a0962:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a0964:	4625      	mov	r5, r4
 80a0966:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a096a:	fb04 5312 	mls	r3, r4, r2, r5
 80a096e:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0970:	2b09      	cmp	r3, #9
 80a0972:	bf94      	ite	ls
 80a0974:	3330      	addls	r3, #48	; 0x30
 80a0976:	3337      	addhi	r3, #55	; 0x37
 80a0978:	b2db      	uxtb	r3, r3
  } while(n);
 80a097a:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a097c:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a0980:	d9f0      	bls.n	80a0964 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a0982:	f7ff ffb8 	bl	80a08f6 <_ZN5Print5writeEPKc>
}
 80a0986:	b00b      	add	sp, #44	; 0x2c
 80a0988:	bd30      	pop	{r4, r5, pc}
	...

080a098c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a098c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0990:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a0992:	4619      	mov	r1, r3
 80a0994:	4610      	mov	r0, r2
{
 80a0996:	4692      	mov	sl, r2
 80a0998:	461f      	mov	r7, r3
 80a099a:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 80a099e:	f001 f935 	bl	80a1c0c <__aeabi_dcmpun>
 80a09a2:	b140      	cbz	r0, 80a09b6 <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 80a09a4:	4950      	ldr	r1, [pc, #320]	; (80a0ae8 <_ZN5Print10printFloatEdh+0x15c>)
 80a09a6:	4628      	mov	r0, r5
 80a09a8:	f7ff ffa5 	bl	80a08f6 <_ZN5Print5writeEPKc>
 80a09ac:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 80a09ae:	4620      	mov	r0, r4
 80a09b0:	b003      	add	sp, #12
 80a09b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80a09b6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 80a09ba:	f04f 32ff 	mov.w	r2, #4294967295
 80a09be:	4650      	mov	r0, sl
 80a09c0:	4621      	mov	r1, r4
 80a09c2:	4b4a      	ldr	r3, [pc, #296]	; (80a0aec <_ZN5Print10printFloatEdh+0x160>)
 80a09c4:	f001 f922 	bl	80a1c0c <__aeabi_dcmpun>
 80a09c8:	b948      	cbnz	r0, 80a09de <_ZN5Print10printFloatEdh+0x52>
 80a09ca:	f04f 32ff 	mov.w	r2, #4294967295
 80a09ce:	4650      	mov	r0, sl
 80a09d0:	4621      	mov	r1, r4
 80a09d2:	4b46      	ldr	r3, [pc, #280]	; (80a0aec <_ZN5Print10printFloatEdh+0x160>)
 80a09d4:	f001 f8fc 	bl	80a1bd0 <__aeabi_dcmple>
 80a09d8:	b908      	cbnz	r0, 80a09de <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 80a09da:	4945      	ldr	r1, [pc, #276]	; (80a0af0 <_ZN5Print10printFloatEdh+0x164>)
 80a09dc:	e7e3      	b.n	80a09a6 <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a09de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a09e2:	4650      	mov	r0, sl
 80a09e4:	4639      	mov	r1, r7
 80a09e6:	4b43      	ldr	r3, [pc, #268]	; (80a0af4 <_ZN5Print10printFloatEdh+0x168>)
 80a09e8:	f001 f906 	bl	80a1bf8 <__aeabi_dcmpgt>
 80a09ec:	b108      	cbz	r0, 80a09f2 <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 80a09ee:	4942      	ldr	r1, [pc, #264]	; (80a0af8 <_ZN5Print10printFloatEdh+0x16c>)
 80a09f0:	e7d9      	b.n	80a09a6 <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a09f2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a09f6:	4650      	mov	r0, sl
 80a09f8:	4639      	mov	r1, r7
 80a09fa:	4b40      	ldr	r3, [pc, #256]	; (80a0afc <_ZN5Print10printFloatEdh+0x170>)
 80a09fc:	f001 f8de 	bl	80a1bbc <__aeabi_dcmplt>
 80a0a00:	2800      	cmp	r0, #0
 80a0a02:	d1f4      	bne.n	80a09ee <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 80a0a04:	2200      	movs	r2, #0
 80a0a06:	2300      	movs	r3, #0
 80a0a08:	4650      	mov	r0, sl
 80a0a0a:	4639      	mov	r1, r7
 80a0a0c:	f001 f8d6 	bl	80a1bbc <__aeabi_dcmplt>
 80a0a10:	4604      	mov	r4, r0
 80a0a12:	b130      	cbz	r0, 80a0a22 <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 80a0a14:	212d      	movs	r1, #45	; 0x2d
 80a0a16:	4628      	mov	r0, r5
 80a0a18:	f7ff ff81 	bl	80a091e <_ZN5Print5printEc>
 80a0a1c:	4604      	mov	r4, r0
     number = -number;
 80a0a1e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 80a0a22:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 80a0a26:	2000      	movs	r0, #0
    rounding /= 10.0;
 80a0a28:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 80a0a2c:	4934      	ldr	r1, [pc, #208]	; (80a0b00 <_ZN5Print10printFloatEdh+0x174>)
    rounding /= 10.0;
 80a0a2e:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80a0b08 <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 80a0a32:	fa5f f38b 	uxtb.w	r3, fp
 80a0a36:	429e      	cmp	r6, r3
 80a0a38:	d906      	bls.n	80a0a48 <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 80a0a3a:	4642      	mov	r2, r8
 80a0a3c:	464b      	mov	r3, r9
 80a0a3e:	f000 ff75 	bl	80a192c <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 80a0a42:	f10b 0b01 	add.w	fp, fp, #1
 80a0a46:	e7f4      	b.n	80a0a32 <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 80a0a48:	463b      	mov	r3, r7
 80a0a4a:	4652      	mov	r2, sl
 80a0a4c:	f000 fc8e 	bl	80a136c <__adddf3>
 80a0a50:	4689      	mov	r9, r1
 80a0a52:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 80a0a54:	f001 f918 	bl	80a1c88 <__aeabi_d2uiz>
 80a0a58:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 80a0a5a:	f000 fdc3 	bl	80a15e4 <__aeabi_ui2d>
 80a0a5e:	4602      	mov	r2, r0
 80a0a60:	460b      	mov	r3, r1
 80a0a62:	4640      	mov	r0, r8
 80a0a64:	4649      	mov	r1, r9
 80a0a66:	f000 fc7f 	bl	80a1368 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0a6a:	220a      	movs	r2, #10
 80a0a6c:	4680      	mov	r8, r0
 80a0a6e:	4689      	mov	r9, r1
 80a0a70:	4628      	mov	r0, r5
 80a0a72:	4639      	mov	r1, r7
 80a0a74:	f7ff ff6c 	bl	80a0950 <_ZN5Print11printNumberEmh>
  n += print(int_part);
 80a0a78:	4404      	add	r4, r0
  if (digits > 0) {
 80a0a7a:	b126      	cbz	r6, 80a0a86 <_ZN5Print10printFloatEdh+0xfa>
  return write(str);
 80a0a7c:	4628      	mov	r0, r5
 80a0a7e:	4921      	ldr	r1, [pc, #132]	; (80a0b04 <_ZN5Print10printFloatEdh+0x178>)
 80a0a80:	f7ff ff39 	bl	80a08f6 <_ZN5Print5writeEPKc>
    n += print(".");
 80a0a84:	4404      	add	r4, r0
    remainder *= 10.0;
 80a0a86:	f04f 0a00 	mov.w	sl, #0
 80a0a8a:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80a0b08 <_ZN5Print10printFloatEdh+0x17c>
  while (digits-- > 0)
 80a0a8e:	3e01      	subs	r6, #1
 80a0a90:	b2f6      	uxtb	r6, r6
 80a0a92:	2eff      	cmp	r6, #255	; 0xff
 80a0a94:	d08b      	beq.n	80a09ae <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 80a0a96:	4652      	mov	r2, sl
 80a0a98:	465b      	mov	r3, fp
 80a0a9a:	4640      	mov	r0, r8
 80a0a9c:	4649      	mov	r1, r9
 80a0a9e:	f000 fe1b 	bl	80a16d8 <__aeabi_dmul>
 80a0aa2:	4680      	mov	r8, r0
 80a0aa4:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 80a0aa6:	f001 f8c7 	bl	80a1c38 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 80a0aaa:	1e07      	subs	r7, r0, #0
 80a0aac:	da19      	bge.n	80a0ae2 <_ZN5Print10printFloatEdh+0x156>
            t = print('-');
 80a0aae:	212d      	movs	r1, #45	; 0x2d
 80a0ab0:	4628      	mov	r0, r5
 80a0ab2:	f7ff ff34 	bl	80a091e <_ZN5Print5printEc>
 80a0ab6:	4603      	mov	r3, r0
            val = -n;
 80a0ab8:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 80a0aba:	220a      	movs	r2, #10
 80a0abc:	4628      	mov	r0, r5
 80a0abe:	9301      	str	r3, [sp, #4]
 80a0ac0:	f7ff ff46 	bl	80a0950 <_ZN5Print11printNumberEmh>
 80a0ac4:	9b01      	ldr	r3, [sp, #4]
 80a0ac6:	4403      	add	r3, r0
    remainder -= toPrint;
 80a0ac8:	4638      	mov	r0, r7
    n += print(toPrint);
 80a0aca:	441c      	add	r4, r3
    remainder -= toPrint;
 80a0acc:	f000 fd9a 	bl	80a1604 <__aeabi_i2d>
 80a0ad0:	4602      	mov	r2, r0
 80a0ad2:	460b      	mov	r3, r1
 80a0ad4:	4640      	mov	r0, r8
 80a0ad6:	4649      	mov	r1, r9
 80a0ad8:	f000 fc46 	bl	80a1368 <__aeabi_dsub>
 80a0adc:	4680      	mov	r8, r0
 80a0ade:	4689      	mov	r9, r1
  while (digits-- > 0)
 80a0ae0:	e7d5      	b.n	80a0a8e <_ZN5Print10printFloatEdh+0x102>
            val = n;
 80a0ae2:	4639      	mov	r1, r7
        size_t t = 0;
 80a0ae4:	2300      	movs	r3, #0
 80a0ae6:	e7e8      	b.n	80a0aba <_ZN5Print10printFloatEdh+0x12e>
 80a0ae8:	080a250c 	.word	0x080a250c
 80a0aec:	7fefffff 	.word	0x7fefffff
 80a0af0:	080a2510 	.word	0x080a2510
 80a0af4:	41efffff 	.word	0x41efffff
 80a0af8:	080a2514 	.word	0x080a2514
 80a0afc:	c1efffff 	.word	0xc1efffff
 80a0b00:	3fe00000 	.word	0x3fe00000
 80a0b04:	080a24af 	.word	0x080a24af
 80a0b08:	40240000 	.word	0x40240000

080a0b0c <_ZN5Print7printlnEdi>:
{
 80a0b0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat(n, digits);
 80a0b0e:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
 80a0b12:	4605      	mov	r5, r0
  return printFloat(n, digits);
 80a0b14:	9100      	str	r1, [sp, #0]
 80a0b16:	f7ff ff39 	bl	80a098c <_ZN5Print10printFloatEdh>
 80a0b1a:	4604      	mov	r4, r0
  n += println();
 80a0b1c:	4628      	mov	r0, r5
 80a0b1e:	f7ff ff01 	bl	80a0924 <_ZN5Print7printlnEv>
}
 80a0b22:	4420      	add	r0, r4
 80a0b24:	b003      	add	sp, #12
 80a0b26:	bd30      	pop	{r4, r5, pc}

080a0b28 <_ZN5Print7printlnEfi>:
{
 80a0b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0b2a:	4604      	mov	r4, r0
    return println((double)num, digits);
 80a0b2c:	4608      	mov	r0, r1
{
 80a0b2e:	4615      	mov	r5, r2
    return println((double)num, digits);
 80a0b30:	f000 fd7a 	bl	80a1628 <__aeabi_f2d>
 80a0b34:	9500      	str	r5, [sp, #0]
 80a0b36:	4602      	mov	r2, r0
 80a0b38:	460b      	mov	r3, r1
 80a0b3a:	4620      	mov	r0, r4
 80a0b3c:	f7ff ffe6 	bl	80a0b0c <_ZN5Print7printlnEdi>
}
 80a0b40:	b003      	add	sp, #12
 80a0b42:	bd30      	pop	{r4, r5, pc}

080a0b44 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0b44:	2300      	movs	r3, #0
 80a0b46:	6840      	ldr	r0, [r0, #4]
 80a0b48:	461a      	mov	r2, r3
 80a0b4a:	4619      	mov	r1, r3
 80a0b4c:	f7ff bdcc 	b.w	80a06e8 <network_on>

080a0b50 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0b50:	4b01      	ldr	r3, [pc, #4]	; (80a0b58 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0b52:	4a02      	ldr	r2, [pc, #8]	; (80a0b5c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0b54:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a0b56:	4770      	bx	lr
 80a0b58:	200000ac 	.word	0x200000ac
 80a0b5c:	080a2518 	.word	0x080a2518

080a0b60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0b60:	4b02      	ldr	r3, [pc, #8]	; (80a0b6c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0b62:	681a      	ldr	r2, [r3, #0]
 80a0b64:	4b02      	ldr	r3, [pc, #8]	; (80a0b70 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0b66:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a0b68:	4770      	bx	lr
 80a0b6a:	bf00      	nop
 80a0b6c:	20000000 	.word	0x20000000
 80a0b70:	200000b0 	.word	0x200000b0

080a0b74 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0b74:	2100      	movs	r1, #0
 80a0b76:	f7ff bd73 	b.w	80a0660 <system_delay_ms>
	...

080a0b7c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0b7c:	2200      	movs	r2, #0
 80a0b7e:	4b01      	ldr	r3, [pc, #4]	; (80a0b84 <_GLOBAL__sub_I_RGB+0x8>)
 80a0b80:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a0b82:	4770      	bx	lr
 80a0b84:	200000b4 	.word	0x200000b4

080a0b88 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a0b88:	4b01      	ldr	r3, [pc, #4]	; (80a0b90 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a0b8a:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a0b8c:	4770      	bx	lr
 80a0b8e:	bf00      	nop
 80a0b90:	20000004 	.word	0x20000004

080a0b94 <serialEventRun>:
{
 80a0b94:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0b96:	4b13      	ldr	r3, [pc, #76]	; (80a0be4 <serialEventRun+0x50>)
 80a0b98:	b143      	cbz	r3, 80a0bac <serialEventRun+0x18>
 80a0b9a:	f000 f975 	bl	80a0e88 <_Z16_fetch_usbserialv>
 80a0b9e:	6803      	ldr	r3, [r0, #0]
 80a0ba0:	691b      	ldr	r3, [r3, #16]
 80a0ba2:	4798      	blx	r3
 80a0ba4:	2800      	cmp	r0, #0
 80a0ba6:	dd01      	ble.n	80a0bac <serialEventRun+0x18>
        serialEvent();
 80a0ba8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a0bac:	4b0e      	ldr	r3, [pc, #56]	; (80a0be8 <serialEventRun+0x54>)
 80a0bae:	b143      	cbz	r3, 80a0bc2 <serialEventRun+0x2e>
 80a0bb0:	f000 fa1a 	bl	80a0fe8 <_Z22__fetch_global_Serial1v>
 80a0bb4:	6803      	ldr	r3, [r0, #0]
 80a0bb6:	691b      	ldr	r3, [r3, #16]
 80a0bb8:	4798      	blx	r3
 80a0bba:	2800      	cmp	r0, #0
 80a0bbc:	dd01      	ble.n	80a0bc2 <serialEventRun+0x2e>
        serialEvent1();
 80a0bbe:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a0bc2:	4b0a      	ldr	r3, [pc, #40]	; (80a0bec <serialEventRun+0x58>)
 80a0bc4:	b10b      	cbz	r3, 80a0bca <serialEventRun+0x36>
 80a0bc6:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0bca:	4b09      	ldr	r3, [pc, #36]	; (80a0bf0 <serialEventRun+0x5c>)
 80a0bcc:	b143      	cbz	r3, 80a0be0 <serialEventRun+0x4c>
 80a0bce:	f000 f995 	bl	80a0efc <_Z17_fetch_usbserial1v>
 80a0bd2:	6803      	ldr	r3, [r0, #0]
 80a0bd4:	691b      	ldr	r3, [r3, #16]
 80a0bd6:	4798      	blx	r3
 80a0bd8:	2800      	cmp	r0, #0
 80a0bda:	dd01      	ble.n	80a0be0 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a0bdc:	f3af 8000 	nop.w
}
 80a0be0:	bd08      	pop	{r3, pc}
 80a0be2:	bf00      	nop
	...

080a0bf4 <_post_loop>:
{
 80a0bf4:	b508      	push	{r3, lr}
	serialEventRun();
 80a0bf6:	f7ff ffcd 	bl	80a0b94 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0bfa:	f7ff fc4d 	bl	80a0498 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0bfe:	4b01      	ldr	r3, [pc, #4]	; (80a0c04 <_post_loop+0x10>)
 80a0c00:	6018      	str	r0, [r3, #0]
}
 80a0c02:	bd08      	pop	{r3, pc}
 80a0c04:	20000530 	.word	0x20000530

080a0c08 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0c08:	4805      	ldr	r0, [pc, #20]	; (80a0c20 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a0c0a:	4a06      	ldr	r2, [pc, #24]	; (80a0c24 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a0c0c:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0c0e:	1a12      	subs	r2, r2, r0
 80a0c10:	4905      	ldr	r1, [pc, #20]	; (80a0c28 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a0c12:	f001 fb83 	bl	80a231c <memcpy>
    __backup_sram_signature = signature;
 80a0c16:	4b05      	ldr	r3, [pc, #20]	; (80a0c2c <_Z33system_initialize_user_backup_ramv+0x24>)
 80a0c18:	4a05      	ldr	r2, [pc, #20]	; (80a0c30 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a0c1a:	601a      	str	r2, [r3, #0]
}
 80a0c1c:	bd08      	pop	{r3, pc}
 80a0c1e:	bf00      	nop
 80a0c20:	40024000 	.word	0x40024000
 80a0c24:	40024004 	.word	0x40024004
 80a0c28:	080a2670 	.word	0x080a2670
 80a0c2c:	40024000 	.word	0x40024000
 80a0c30:	9a271c1e 	.word	0x9a271c1e

080a0c34 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0c34:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0c36:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0c38:	461a      	mov	r2, r3
 80a0c3a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0c3e:	9300      	str	r3, [sp, #0]
 80a0c40:	f7ff fd28 	bl	80a0694 <system_ctrl_set_result>
}
 80a0c44:	b003      	add	sp, #12
 80a0c46:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0c4c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a0c4c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0c4e:	8843      	ldrh	r3, [r0, #2]
 80a0c50:	2b0a      	cmp	r3, #10
 80a0c52:	d008      	beq.n	80a0c66 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0c54:	2b50      	cmp	r3, #80	; 0x50
 80a0c56:	d10b      	bne.n	80a0c70 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a0c58:	4b09      	ldr	r3, [pc, #36]	; (80a0c80 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0c5a:	681b      	ldr	r3, [r3, #0]
 80a0c5c:	b14b      	cbz	r3, 80a0c72 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a0c5e:	b003      	add	sp, #12
 80a0c60:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a0c64:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a0c66:	f7ff ffe5 	bl	80a0c34 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a0c6a:	b003      	add	sp, #12
 80a0c6c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0c70:	2300      	movs	r3, #0
 80a0c72:	461a      	mov	r2, r3
 80a0c74:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0c78:	9300      	str	r3, [sp, #0]
 80a0c7a:	f7ff fd0b 	bl	80a0694 <system_ctrl_set_result>
}
 80a0c7e:	e7f4      	b.n	80a0c6a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a0c80:	200000c8 	.word	0x200000c8

080a0c84 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a0c84:	2100      	movs	r1, #0
{
 80a0c86:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a0c88:	4811      	ldr	r0, [pc, #68]	; (80a0cd0 <module_user_init_hook+0x4c>)
 80a0c8a:	f7ff fd8d 	bl	80a07a8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a0c8e:	4b11      	ldr	r3, [pc, #68]	; (80a0cd4 <module_user_init_hook+0x50>)
 80a0c90:	681a      	ldr	r2, [r3, #0]
 80a0c92:	4b11      	ldr	r3, [pc, #68]	; (80a0cd8 <module_user_init_hook+0x54>)
 80a0c94:	429a      	cmp	r2, r3
 80a0c96:	bf0c      	ite	eq
 80a0c98:	2201      	moveq	r2, #1
 80a0c9a:	2200      	movne	r2, #0
 80a0c9c:	4b0f      	ldr	r3, [pc, #60]	; (80a0cdc <module_user_init_hook+0x58>)
 80a0c9e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0ca0:	d001      	beq.n	80a0ca6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a0ca2:	f7ff ffb1 	bl	80a0c08 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0ca6:	f7ff fbef 	bl	80a0488 <HAL_RNG_GetRandomNumber>
 80a0caa:	4604      	mov	r4, r0
    srand(seed);
 80a0cac:	f001 fb4c 	bl	80a2348 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0cb0:	4b0b      	ldr	r3, [pc, #44]	; (80a0ce0 <module_user_init_hook+0x5c>)
 80a0cb2:	b113      	cbz	r3, 80a0cba <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a0cb4:	4620      	mov	r0, r4
 80a0cb6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0cba:	2100      	movs	r1, #0
 80a0cbc:	4808      	ldr	r0, [pc, #32]	; (80a0ce0 <module_user_init_hook+0x5c>)
 80a0cbe:	f7ff fd53 	bl	80a0768 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0cc6:	2100      	movs	r1, #0
 80a0cc8:	4806      	ldr	r0, [pc, #24]	; (80a0ce4 <module_user_init_hook+0x60>)
 80a0cca:	f7ff bcd9 	b.w	80a0680 <system_ctrl_set_app_request_handler>
 80a0cce:	bf00      	nop
 80a0cd0:	080a0b89 	.word	0x080a0b89
 80a0cd4:	40024000 	.word	0x40024000
 80a0cd8:	9a271c1e 	.word	0x9a271c1e
 80a0cdc:	200000c4 	.word	0x200000c4
 80a0ce0:	00000000 	.word	0x00000000
 80a0ce4:	080a0c4d 	.word	0x080a0c4d

080a0ce8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0ce8:	4770      	bx	lr

080a0cea <_ZN9IPAddressD0Ev>:
 80a0cea:	b510      	push	{r4, lr}
 80a0cec:	4604      	mov	r4, r0
 80a0cee:	2118      	movs	r1, #24
 80a0cf0:	f000 fb32 	bl	80a1358 <_ZdlPvj>
 80a0cf4:	4620      	mov	r0, r4
 80a0cf6:	bd10      	pop	{r4, pc}

080a0cf8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0cfa:	460e      	mov	r6, r1
 80a0cfc:	2400      	movs	r4, #0
 80a0cfe:	f100 0708 	add.w	r7, r0, #8
 80a0d02:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 80a0d04:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a0d08:	220a      	movs	r2, #10
 80a0d0a:	4630      	mov	r0, r6
 80a0d0c:	f7ff fe20 	bl	80a0950 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0d10:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0d12:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a0d14:	d101      	bne.n	80a0d1a <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a0d16:	4620      	mov	r0, r4
 80a0d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a0d1a:	2c00      	cmp	r4, #0
 80a0d1c:	d0f2      	beq.n	80a0d04 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0d1e:	212e      	movs	r1, #46	; 0x2e
 80a0d20:	4630      	mov	r0, r6
 80a0d22:	f7ff fdfc 	bl	80a091e <_ZN5Print5printEc>
 80a0d26:	4404      	add	r4, r0
 80a0d28:	e7ec      	b.n	80a0d04 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a0d2c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a0d2c:	b510      	push	{r4, lr}
 80a0d2e:	4604      	mov	r4, r0
 80a0d30:	4b04      	ldr	r3, [pc, #16]	; (80a0d44 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0d32:	2211      	movs	r2, #17
 80a0d34:	2100      	movs	r1, #0
 80a0d36:	f840 3b04 	str.w	r3, [r0], #4
 80a0d3a:	f001 fafd 	bl	80a2338 <memset>
}
 80a0d3e:	4620      	mov	r0, r4
 80a0d40:	bd10      	pop	{r4, pc}
 80a0d42:	bf00      	nop
 80a0d44:	080a2540 	.word	0x080a2540

080a0d48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0d48:	4603      	mov	r3, r0
 80a0d4a:	4a07      	ldr	r2, [pc, #28]	; (80a0d68 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0d4c:	b510      	push	{r4, lr}
 80a0d4e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a0d52:	f101 0210 	add.w	r2, r1, #16
 80a0d56:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0d5a:	4291      	cmp	r1, r2
 80a0d5c:	f843 4b04 	str.w	r4, [r3], #4
 80a0d60:	d1f9      	bne.n	80a0d56 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0d62:	780a      	ldrb	r2, [r1, #0]
 80a0d64:	701a      	strb	r2, [r3, #0]
}
 80a0d66:	bd10      	pop	{r4, pc}
 80a0d68:	080a2540 	.word	0x080a2540

080a0d6c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a0d6c:	4a02      	ldr	r2, [pc, #8]	; (80a0d78 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a0d6e:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a0d72:	2204      	movs	r2, #4
 80a0d74:	7502      	strb	r2, [r0, #20]
}
 80a0d76:	4770      	bx	lr
 80a0d78:	080a2540 	.word	0x080a2540

080a0d7c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a0d7c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0d7e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0d82:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a0d86:	2304      	movs	r3, #4
 80a0d88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a0d8c:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a0d90:	6044      	str	r4, [r0, #4]
 80a0d92:	7503      	strb	r3, [r0, #20]
}
 80a0d94:	bd10      	pop	{r4, pc}
	...

080a0d98 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0d9a:	4d04      	ldr	r5, [pc, #16]	; (80a0dac <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0d9c:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0d9e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0da2:	9500      	str	r5, [sp, #0]
 80a0da4:	f7ff ffea 	bl	80a0d7c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0da8:	b003      	add	sp, #12
 80a0daa:	bd30      	pop	{r4, r5, pc}
 80a0dac:	080a2540 	.word	0x080a2540

080a0db0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0db0:	7441      	strb	r1, [r0, #17]
}
 80a0db2:	4770      	bx	lr

080a0db4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0db4:	4770      	bx	lr

080a0db6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0db6:	4770      	bx	lr

080a0db8 <_ZN9USBSerial4readEv>:
{
 80a0db8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0dba:	2100      	movs	r1, #0
 80a0dbc:	7c00      	ldrb	r0, [r0, #16]
 80a0dbe:	f7ff fc27 	bl	80a0610 <HAL_USB_USART_Receive_Data>
}
 80a0dc2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0dc6:	bd08      	pop	{r3, pc}

080a0dc8 <_ZN9USBSerial4peekEv>:
{
 80a0dc8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a0dca:	2101      	movs	r1, #1
 80a0dcc:	7c00      	ldrb	r0, [r0, #16]
 80a0dce:	f7ff fc1f 	bl	80a0610 <HAL_USB_USART_Receive_Data>
}
 80a0dd2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0dd6:	bd08      	pop	{r3, pc}

080a0dd8 <_ZN9USBSerial17availableForWriteEv>:
{
 80a0dd8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0dda:	7c00      	ldrb	r0, [r0, #16]
 80a0ddc:	f7ff fc10 	bl	80a0600 <HAL_USB_USART_Available_Data_For_Write>
}
 80a0de0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0de4:	bd08      	pop	{r3, pc}

080a0de6 <_ZN9USBSerial9availableEv>:
{
 80a0de6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0de8:	7c00      	ldrb	r0, [r0, #16]
 80a0dea:	f7ff fc01 	bl	80a05f0 <HAL_USB_USART_Available_Data>
}
 80a0dee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0df2:	bd08      	pop	{r3, pc}

080a0df4 <_ZN9USBSerial5writeEh>:
{
 80a0df4:	b538      	push	{r3, r4, r5, lr}
 80a0df6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0df8:	7c00      	ldrb	r0, [r0, #16]
{
 80a0dfa:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0dfc:	f7ff fc00 	bl	80a0600 <HAL_USB_USART_Available_Data_For_Write>
 80a0e00:	2800      	cmp	r0, #0
 80a0e02:	dc01      	bgt.n	80a0e08 <_ZN9USBSerial5writeEh+0x14>
 80a0e04:	7c60      	ldrb	r0, [r4, #17]
 80a0e06:	b128      	cbz	r0, 80a0e14 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0e08:	4629      	mov	r1, r5
 80a0e0a:	7c20      	ldrb	r0, [r4, #16]
 80a0e0c:	f7ff fc08 	bl	80a0620 <HAL_USB_USART_Send_Data>
 80a0e10:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a0e14:	bd38      	pop	{r3, r4, r5, pc}

080a0e16 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a0e16:	7c00      	ldrb	r0, [r0, #16]
 80a0e18:	f7ff bc0a 	b.w	80a0630 <HAL_USB_USART_Flush_Data>

080a0e1c <_ZN9USBSerialD0Ev>:
 80a0e1c:	b510      	push	{r4, lr}
 80a0e1e:	4604      	mov	r4, r0
 80a0e20:	2114      	movs	r1, #20
 80a0e22:	f000 fa99 	bl	80a1358 <_ZdlPvj>
 80a0e26:	4620      	mov	r0, r4
 80a0e28:	bd10      	pop	{r4, pc}

080a0e2a <__tcf_1>:
 80a0e2a:	4770      	bx	lr

080a0e2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0e2c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0e32:	4604      	mov	r4, r0
 80a0e34:	4608      	mov	r0, r1
 80a0e36:	2100      	movs	r1, #0
 80a0e38:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0e3c:	4b04      	ldr	r3, [pc, #16]	; (80a0e50 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a0e3e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0e40:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a0e42:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a0e44:	4611      	mov	r1, r2
  _blocking = true;
 80a0e46:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a0e48:	f7ff fbc2 	bl	80a05d0 <HAL_USB_USART_Init>
}
 80a0e4c:	4620      	mov	r0, r4
 80a0e4e:	bd10      	pop	{r4, pc}
 80a0e50:	080a2554 	.word	0x080a2554

080a0e54 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a0e54:	2200      	movs	r2, #0
 80a0e56:	7c00      	ldrb	r0, [r0, #16]
 80a0e58:	f7ff bbc2 	b.w	80a05e0 <HAL_USB_USART_Begin>

080a0e5c <_Z19acquireSerialBufferv>:
{
 80a0e5c:	b510      	push	{r4, lr}
 80a0e5e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0e60:	2214      	movs	r2, #20
 80a0e62:	2100      	movs	r1, #0
 80a0e64:	f001 fa68 	bl	80a2338 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a0e68:	4b05      	ldr	r3, [pc, #20]	; (80a0e80 <_Z19acquireSerialBufferv+0x24>)
}
 80a0e6a:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a0e6c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a0e6e:	4b05      	ldr	r3, [pc, #20]	; (80a0e84 <_Z19acquireSerialBufferv+0x28>)
 80a0e70:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0e72:	f240 1301 	movw	r3, #257	; 0x101
 80a0e76:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0e78:	2381      	movs	r3, #129	; 0x81
 80a0e7a:	8223      	strh	r3, [r4, #16]
}
 80a0e7c:	bd10      	pop	{r4, pc}
 80a0e7e:	bf00      	nop
 80a0e80:	200000fc 	.word	0x200000fc
 80a0e84:	200001fd 	.word	0x200001fd

080a0e88 <_Z16_fetch_usbserialv>:
{
 80a0e88:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0e8a:	4d0e      	ldr	r5, [pc, #56]	; (80a0ec4 <_Z16_fetch_usbserialv+0x3c>)
{
 80a0e8c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0e8e:	a801      	add	r0, sp, #4
 80a0e90:	f7ff ffe4 	bl	80a0e5c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0e94:	7829      	ldrb	r1, [r5, #0]
 80a0e96:	f3bf 8f5b 	dmb	ish
 80a0e9a:	f011 0401 	ands.w	r4, r1, #1
 80a0e9e:	d10e      	bne.n	80a0ebe <_Z16_fetch_usbserialv+0x36>
 80a0ea0:	4628      	mov	r0, r5
 80a0ea2:	f7ff f8fe 	bl	80a00a2 <__cxa_guard_acquire>
 80a0ea6:	b150      	cbz	r0, 80a0ebe <_Z16_fetch_usbserialv+0x36>
 80a0ea8:	4621      	mov	r1, r4
 80a0eaa:	aa01      	add	r2, sp, #4
 80a0eac:	4806      	ldr	r0, [pc, #24]	; (80a0ec8 <_Z16_fetch_usbserialv+0x40>)
 80a0eae:	f7ff ffbd 	bl	80a0e2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0eb2:	4628      	mov	r0, r5
 80a0eb4:	f7ff f8fa 	bl	80a00ac <__cxa_guard_release>
 80a0eb8:	4804      	ldr	r0, [pc, #16]	; (80a0ecc <_Z16_fetch_usbserialv+0x44>)
 80a0eba:	f001 fa29 	bl	80a2310 <atexit>
	return _usbserial;
}
 80a0ebe:	4802      	ldr	r0, [pc, #8]	; (80a0ec8 <_Z16_fetch_usbserialv+0x40>)
 80a0ec0:	b007      	add	sp, #28
 80a0ec2:	bd30      	pop	{r4, r5, pc}
 80a0ec4:	200000cc 	.word	0x200000cc
 80a0ec8:	200000d4 	.word	0x200000d4
 80a0ecc:	080a0db5 	.word	0x080a0db5

080a0ed0 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0ed0:	b510      	push	{r4, lr}
 80a0ed2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0ed4:	2214      	movs	r2, #20
 80a0ed6:	2100      	movs	r1, #0
 80a0ed8:	f001 fa2e 	bl	80a2338 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0edc:	4b05      	ldr	r3, [pc, #20]	; (80a0ef4 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0ede:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a0ee0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0ee2:	4b05      	ldr	r3, [pc, #20]	; (80a0ef8 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0ee4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0ee6:	f240 1301 	movw	r3, #257	; 0x101
 80a0eea:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0eec:	2381      	movs	r3, #129	; 0x81
 80a0eee:	8223      	strh	r3, [r4, #16]
}
 80a0ef0:	bd10      	pop	{r4, pc}
 80a0ef2:	bf00      	nop
 80a0ef4:	2000027e 	.word	0x2000027e
 80a0ef8:	2000037f 	.word	0x2000037f

080a0efc <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0efc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0efe:	4c0e      	ldr	r4, [pc, #56]	; (80a0f38 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a0f00:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0f02:	a801      	add	r0, sp, #4
 80a0f04:	f7ff ffe4 	bl	80a0ed0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0f08:	7823      	ldrb	r3, [r4, #0]
 80a0f0a:	f3bf 8f5b 	dmb	ish
 80a0f0e:	07db      	lsls	r3, r3, #31
 80a0f10:	d40e      	bmi.n	80a0f30 <_Z17_fetch_usbserial1v+0x34>
 80a0f12:	4620      	mov	r0, r4
 80a0f14:	f7ff f8c5 	bl	80a00a2 <__cxa_guard_acquire>
 80a0f18:	b150      	cbz	r0, 80a0f30 <_Z17_fetch_usbserial1v+0x34>
 80a0f1a:	2101      	movs	r1, #1
 80a0f1c:	aa01      	add	r2, sp, #4
 80a0f1e:	4807      	ldr	r0, [pc, #28]	; (80a0f3c <_Z17_fetch_usbserial1v+0x40>)
 80a0f20:	f7ff ff84 	bl	80a0e2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0f24:	4620      	mov	r0, r4
 80a0f26:	f7ff f8c1 	bl	80a00ac <__cxa_guard_release>
 80a0f2a:	4805      	ldr	r0, [pc, #20]	; (80a0f40 <_Z17_fetch_usbserial1v+0x44>)
 80a0f2c:	f001 f9f0 	bl	80a2310 <atexit>
  return _usbserial1;
}
 80a0f30:	4802      	ldr	r0, [pc, #8]	; (80a0f3c <_Z17_fetch_usbserial1v+0x40>)
 80a0f32:	b006      	add	sp, #24
 80a0f34:	bd10      	pop	{r4, pc}
 80a0f36:	bf00      	nop
 80a0f38:	200000d0 	.word	0x200000d0
 80a0f3c:	200000e8 	.word	0x200000e8
 80a0f40:	080a0e2b 	.word	0x080a0e2b

080a0f44 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a0f44:	4770      	bx	lr

080a0f46 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0f46:	7441      	strb	r1, [r0, #17]
}
 80a0f48:	4770      	bx	lr

080a0f4a <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0f4a:	4770      	bx	lr

080a0f4c <_ZN11USARTSerial17availableForWriteEv>:
{
 80a0f4c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a0f4e:	7c00      	ldrb	r0, [r0, #16]
 80a0f50:	f7ff fada 	bl	80a0508 <hal_usart_available_data_for_write>
}
 80a0f54:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0f58:	bd08      	pop	{r3, pc}

080a0f5a <_ZN11USARTSerial9availableEv>:
{
 80a0f5a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a0f5c:	7c00      	ldrb	r0, [r0, #16]
 80a0f5e:	f7ff fab3 	bl	80a04c8 <hal_usart_available>
}
 80a0f62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0f66:	bd08      	pop	{r3, pc}

080a0f68 <_ZN11USARTSerial4peekEv>:
{
 80a0f68:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a0f6a:	7c00      	ldrb	r0, [r0, #16]
 80a0f6c:	f7ff fabc 	bl	80a04e8 <hal_usart_peek>
}
 80a0f70:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0f74:	bd08      	pop	{r3, pc}

080a0f76 <_ZN11USARTSerial4readEv>:
{
 80a0f76:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a0f78:	7c00      	ldrb	r0, [r0, #16]
 80a0f7a:	f7ff faad 	bl	80a04d8 <hal_usart_read>
}
 80a0f7e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0f82:	bd08      	pop	{r3, pc}

080a0f84 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 80a0f84:	7c00      	ldrb	r0, [r0, #16]
 80a0f86:	f7ff bab7 	b.w	80a04f8 <hal_usart_flush>

080a0f8a <_ZN11USARTSerial5writeEh>:
{
 80a0f8a:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0f8c:	7c46      	ldrb	r6, [r0, #17]
{
 80a0f8e:	4604      	mov	r4, r0
 80a0f90:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0f92:	b12e      	cbz	r6, 80a0fa0 <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 80a0f94:	4629      	mov	r1, r5
 80a0f96:	7c20      	ldrb	r0, [r4, #16]
}
 80a0f98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a0f9c:	f7ff ba8c 	b.w	80a04b8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0fa0:	7c00      	ldrb	r0, [r0, #16]
 80a0fa2:	f7ff fab1 	bl	80a0508 <hal_usart_available_data_for_write>
 80a0fa6:	2800      	cmp	r0, #0
 80a0fa8:	dcf4      	bgt.n	80a0f94 <_ZN11USARTSerial5writeEh+0xa>
}
 80a0faa:	4630      	mov	r0, r6
 80a0fac:	bd70      	pop	{r4, r5, r6, pc}

080a0fae <_ZN11USARTSerialD0Ev>:
 80a0fae:	b510      	push	{r4, lr}
 80a0fb0:	4604      	mov	r4, r0
 80a0fb2:	2114      	movs	r1, #20
 80a0fb4:	f000 f9d0 	bl	80a1358 <_ZdlPvj>
 80a0fb8:	4620      	mov	r0, r4
 80a0fba:	bd10      	pop	{r4, pc}

080a0fbc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a0fbc:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a0fc0:	b510      	push	{r4, lr}
 80a0fc2:	4604      	mov	r4, r0
 80a0fc4:	4608      	mov	r0, r1
 80a0fc6:	4611      	mov	r1, r2
 80a0fc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0fcc:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a0fd0:	4a04      	ldr	r2, [pc, #16]	; (80a0fe4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a0fd2:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a0fd4:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a0fd6:	2201      	movs	r2, #1
 80a0fd8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a0fda:	461a      	mov	r2, r3
 80a0fdc:	f7ff fa64 	bl	80a04a8 <hal_usart_init>
}
 80a0fe0:	4620      	mov	r0, r4
 80a0fe2:	bd10      	pop	{r4, pc}
 80a0fe4:	080a2584 	.word	0x080a2584

080a0fe8 <_Z22__fetch_global_Serial1v>:
{
 80a0fe8:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0fea:	4d0c      	ldr	r5, [pc, #48]	; (80a101c <_Z22__fetch_global_Serial1v+0x34>)
 80a0fec:	7829      	ldrb	r1, [r5, #0]
 80a0fee:	f3bf 8f5b 	dmb	ish
 80a0ff2:	f011 0401 	ands.w	r4, r1, #1
 80a0ff6:	d10f      	bne.n	80a1018 <_Z22__fetch_global_Serial1v+0x30>
 80a0ff8:	4628      	mov	r0, r5
 80a0ffa:	f7ff f852 	bl	80a00a2 <__cxa_guard_acquire>
 80a0ffe:	b158      	cbz	r0, 80a1018 <_Z22__fetch_global_Serial1v+0x30>
 80a1000:	4621      	mov	r1, r4
 80a1002:	4b07      	ldr	r3, [pc, #28]	; (80a1020 <_Z22__fetch_global_Serial1v+0x38>)
 80a1004:	4a07      	ldr	r2, [pc, #28]	; (80a1024 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1006:	4808      	ldr	r0, [pc, #32]	; (80a1028 <_Z22__fetch_global_Serial1v+0x40>)
 80a1008:	f7ff ffd8 	bl	80a0fbc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a100c:	4628      	mov	r0, r5
 80a100e:	f7ff f84d 	bl	80a00ac <__cxa_guard_release>
 80a1012:	4806      	ldr	r0, [pc, #24]	; (80a102c <_Z22__fetch_global_Serial1v+0x44>)
 80a1014:	f001 f97c 	bl	80a2310 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1018:	4803      	ldr	r0, [pc, #12]	; (80a1028 <_Z22__fetch_global_Serial1v+0x40>)
 80a101a:	bd38      	pop	{r3, r4, r5, pc}
 80a101c:	20000400 	.word	0x20000400
 80a1020:	20000488 	.word	0x20000488
 80a1024:	20000404 	.word	0x20000404
 80a1028:	2000050c 	.word	0x2000050c
 80a102c:	080a0f4b 	.word	0x080a0f4b

080a1030 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a1030:	4770      	bx	lr

080a1032 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1034:	4606      	mov	r6, r0
 80a1036:	4615      	mov	r5, r2
 80a1038:	460c      	mov	r4, r1
 80a103a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a103c:	42bc      	cmp	r4, r7
 80a103e:	d006      	beq.n	80a104e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1040:	6833      	ldr	r3, [r6, #0]
 80a1042:	4630      	mov	r0, r6
 80a1044:	689b      	ldr	r3, [r3, #8]
 80a1046:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a104a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a104c:	e7f6      	b.n	80a103c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a104e:	4628      	mov	r0, r5
 80a1050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1052 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a1052:	2200      	movs	r2, #0
 80a1054:	7c00      	ldrb	r0, [r0, #16]
 80a1056:	f7ff ba77 	b.w	80a0548 <hal_i2c_write>

080a105a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a105a:	2100      	movs	r1, #0
 80a105c:	7c00      	ldrb	r0, [r0, #16]
 80a105e:	f7ff ba7b 	b.w	80a0558 <hal_i2c_available>

080a1062 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a1062:	2100      	movs	r1, #0
 80a1064:	7c00      	ldrb	r0, [r0, #16]
 80a1066:	f7ff ba7f 	b.w	80a0568 <hal_i2c_read>

080a106a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a106a:	2100      	movs	r1, #0
 80a106c:	7c00      	ldrb	r0, [r0, #16]
 80a106e:	f7ff ba83 	b.w	80a0578 <hal_i2c_peek>

080a1072 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a1072:	2100      	movs	r1, #0
 80a1074:	7c00      	ldrb	r0, [r0, #16]
 80a1076:	f7ff ba87 	b.w	80a0588 <hal_i2c_flush>

080a107a <_ZN7TwoWireD0Ev>:
 80a107a:	b510      	push	{r4, lr}
 80a107c:	4604      	mov	r4, r0
 80a107e:	2114      	movs	r1, #20
 80a1080:	f000 f96a 	bl	80a1358 <_ZdlPvj>
 80a1084:	4620      	mov	r0, r4
 80a1086:	bd10      	pop	{r4, pc}

080a1088 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1088:	b510      	push	{r4, lr}
 80a108a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a108e:	4604      	mov	r4, r0
 80a1090:	4608      	mov	r0, r1
 80a1092:	2100      	movs	r1, #0
 80a1094:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1098:	4b03      	ldr	r3, [pc, #12]	; (80a10a8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a109a:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a109c:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a109e:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a10a0:	f7ff fa82 	bl	80a05a8 <hal_i2c_init>
}
 80a10a4:	4620      	mov	r0, r4
 80a10a6:	bd10      	pop	{r4, pc}
 80a10a8:	080a25b4 	.word	0x080a25b4

080a10ac <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a10ac:	2300      	movs	r3, #0
 80a10ae:	7c00      	ldrb	r0, [r0, #16]
 80a10b0:	461a      	mov	r2, r3
 80a10b2:	4619      	mov	r1, r3
 80a10b4:	f7ff ba30 	b.w	80a0518 <hal_i2c_begin>

080a10b8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80a10b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 80a10ba:	2200      	movs	r2, #0
 80a10bc:	2314      	movs	r3, #20
 80a10be:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80a10c2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 80a10c6:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 80a10c8:	7c00      	ldrb	r0, [r0, #16]
 80a10ca:	f88d 3008 	strb.w	r3, [sp, #8]
 80a10ce:	684b      	ldr	r3, [r1, #4]
 80a10d0:	9303      	str	r3, [sp, #12]
 80a10d2:	68cb      	ldr	r3, [r1, #12]
 80a10d4:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 80a10d6:	7a0b      	ldrb	r3, [r1, #8]
 80a10d8:	a901      	add	r1, sp, #4
 80a10da:	9305      	str	r3, [sp, #20]
 80a10dc:	f7ff fa6e 	bl	80a05bc <hal_i2c_request_ex>
}
 80a10e0:	b007      	add	sp, #28
 80a10e2:	f85d fb04 	ldr.w	pc, [sp], #4

080a10e6 <_ZN7TwoWire11requestFromEhjh>:
{
 80a10e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 80a10e8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80a10ea:	f88d 1000 	strb.w	r1, [sp]
 80a10ee:	f04f 0164 	mov.w	r1, #100	; 0x64
 80a10f2:	bf18      	it	ne
 80a10f4:	2301      	movne	r3, #1
 80a10f6:	9103      	str	r1, [sp, #12]
 80a10f8:	4669      	mov	r1, sp
    size_ = size;
 80a10fa:	9201      	str	r2, [sp, #4]
 80a10fc:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1100:	f7ff ffda 	bl	80a10b8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 80a1104:	b005      	add	sp, #20
 80a1106:	f85d fb04 	ldr.w	pc, [sp], #4

080a110a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 80a110a:	2301      	movs	r3, #1
 80a110c:	f7ff bfeb 	b.w	80a10e6 <_ZN7TwoWire11requestFromEhjh>

080a1110 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a1110:	2200      	movs	r2, #0
 80a1112:	7c00      	ldrb	r0, [r0, #16]
 80a1114:	f7ff ba08 	b.w	80a0528 <hal_i2c_begin_transmission>

080a1118 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a1118:	2200      	movs	r2, #0
 80a111a:	7c00      	ldrb	r0, [r0, #16]
 80a111c:	f7ff ba0c 	b.w	80a0538 <hal_i2c_end_transmission>

080a1120 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a1120:	2101      	movs	r1, #1
 80a1122:	f7ff bff9 	b.w	80a1118 <_ZN7TwoWire15endTransmissionEh>

080a1126 <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
 80a1126:	2100      	movs	r1, #0
 80a1128:	7c00      	ldrb	r0, [r0, #16]
 80a112a:	f7ff ba35 	b.w	80a0598 <hal_i2c_is_enabled>

080a112e <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a112e:	2200      	movs	r2, #0
 80a1130:	6840      	ldr	r0, [r0, #4]
 80a1132:	4611      	mov	r1, r2
 80a1134:	f7ff bad0 	b.w	80a06d8 <network_ready>

080a1138 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1138:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a113a:	4615      	mov	r5, r2
 80a113c:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a113e:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a1140:	460e      	mov	r6, r1
 80a1142:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a1144:	2100      	movs	r1, #0
 80a1146:	a803      	add	r0, sp, #12
 80a1148:	f001 f8f6 	bl	80a2338 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a114c:	4628      	mov	r0, r5
 80a114e:	f001 f91f 	bl	80a2390 <strlen>
 80a1152:	2700      	movs	r7, #0
 80a1154:	b281      	uxth	r1, r0
 80a1156:	6873      	ldr	r3, [r6, #4]
 80a1158:	4628      	mov	r0, r5
 80a115a:	9700      	str	r7, [sp, #0]
 80a115c:	aa03      	add	r2, sp, #12
 80a115e:	f7ff fa6f 	bl	80a0640 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1162:	b130      	cbz	r0, 80a1172 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a1164:	4639      	mov	r1, r7
 80a1166:	4620      	mov	r0, r4
 80a1168:	f7ff fe00 	bl	80a0d6c <_ZN9IPAddressC1Em>
    }
 80a116c:	4620      	mov	r0, r4
 80a116e:	b009      	add	sp, #36	; 0x24
 80a1170:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1172:	4620      	mov	r0, r4
 80a1174:	a903      	add	r1, sp, #12
 80a1176:	f7ff fde7 	bl	80a0d48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a117a:	e7f7      	b.n	80a116c <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a117c <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a117c:	2200      	movs	r2, #0
 80a117e:	6840      	ldr	r0, [r0, #4]
 80a1180:	4611      	mov	r1, r2
 80a1182:	f7ff bac9 	b.w	80a0718 <network_listening>

080a1186 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a1186:	2200      	movs	r2, #0
 80a1188:	6840      	ldr	r0, [r0, #4]
 80a118a:	4611      	mov	r1, r2
 80a118c:	f7ff bad4 	b.w	80a0738 <network_get_listen_timeout>

080a1190 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a1190:	2200      	movs	r2, #0
 80a1192:	6840      	ldr	r0, [r0, #4]
 80a1194:	f7ff bac8 	b.w	80a0728 <network_set_listen_timeout>

080a1198 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1198:	2200      	movs	r2, #0
 80a119a:	6840      	ldr	r0, [r0, #4]
 80a119c:	f081 0101 	eor.w	r1, r1, #1
 80a11a0:	f7ff bab2 	b.w	80a0708 <network_listen>

080a11a4 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a11a4:	2300      	movs	r3, #0
 80a11a6:	6840      	ldr	r0, [r0, #4]
 80a11a8:	461a      	mov	r2, r3
 80a11aa:	4619      	mov	r1, r3
 80a11ac:	f7ff baa4 	b.w	80a06f8 <network_off>

080a11b0 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a11b0:	2200      	movs	r2, #0
 80a11b2:	6840      	ldr	r0, [r0, #4]
 80a11b4:	4611      	mov	r1, r2
 80a11b6:	f7ff ba7f 	b.w	80a06b8 <network_connecting>

080a11ba <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a11ba:	2200      	movs	r2, #0
 80a11bc:	2102      	movs	r1, #2
 80a11be:	6840      	ldr	r0, [r0, #4]
 80a11c0:	f7ff ba82 	b.w	80a06c8 <network_disconnect>

080a11c4 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a11c4:	2300      	movs	r3, #0
 80a11c6:	6840      	ldr	r0, [r0, #4]
 80a11c8:	461a      	mov	r2, r3
 80a11ca:	f7ff ba6d 	b.w	80a06a8 <network_connect>
	...

080a11d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a11d0:	2204      	movs	r2, #4
 80a11d2:	4b02      	ldr	r3, [pc, #8]	; (80a11dc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a11d4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a11d6:	4a02      	ldr	r2, [pc, #8]	; (80a11e0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a11d8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a11da:	4770      	bx	lr
 80a11dc:	20000520 	.word	0x20000520
 80a11e0:	080a25dc 	.word	0x080a25dc

080a11e4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a11e4:	2300      	movs	r3, #0
 80a11e6:	6840      	ldr	r0, [r0, #4]
 80a11e8:	461a      	mov	r2, r3
 80a11ea:	f7ff ba5d 	b.w	80a06a8 <network_connect>

080a11ee <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a11ee:	2200      	movs	r2, #0
 80a11f0:	2102      	movs	r1, #2
 80a11f2:	6840      	ldr	r0, [r0, #4]
 80a11f4:	f7ff ba68 	b.w	80a06c8 <network_disconnect>

080a11f8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a11f8:	2200      	movs	r2, #0
 80a11fa:	6840      	ldr	r0, [r0, #4]
 80a11fc:	4611      	mov	r1, r2
 80a11fe:	f7ff ba5b 	b.w	80a06b8 <network_connecting>

080a1202 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1202:	2200      	movs	r2, #0
 80a1204:	6840      	ldr	r0, [r0, #4]
 80a1206:	4611      	mov	r1, r2
 80a1208:	f7ff ba66 	b.w	80a06d8 <network_ready>

080a120c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a120c:	2300      	movs	r3, #0
 80a120e:	6840      	ldr	r0, [r0, #4]
 80a1210:	461a      	mov	r2, r3
 80a1212:	4619      	mov	r1, r3
 80a1214:	f7ff ba68 	b.w	80a06e8 <network_on>

080a1218 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1218:	2300      	movs	r3, #0
 80a121a:	6840      	ldr	r0, [r0, #4]
 80a121c:	461a      	mov	r2, r3
 80a121e:	4619      	mov	r1, r3
 80a1220:	f7ff ba6a 	b.w	80a06f8 <network_off>

080a1224 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a1224:	2100      	movs	r1, #0
 80a1226:	6840      	ldr	r0, [r0, #4]
 80a1228:	f7ff ba8e 	b.w	80a0748 <network_is_on>

080a122c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a122c:	2100      	movs	r1, #0
 80a122e:	6840      	ldr	r0, [r0, #4]
 80a1230:	f7ff ba92 	b.w	80a0758 <network_is_off>

080a1234 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1234:	2200      	movs	r2, #0
 80a1236:	6840      	ldr	r0, [r0, #4]
 80a1238:	f081 0101 	eor.w	r1, r1, #1
 80a123c:	f7ff ba64 	b.w	80a0708 <network_listen>

080a1240 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1240:	2200      	movs	r2, #0
 80a1242:	6840      	ldr	r0, [r0, #4]
 80a1244:	f7ff ba70 	b.w	80a0728 <network_set_listen_timeout>

080a1248 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1248:	2200      	movs	r2, #0
 80a124a:	6840      	ldr	r0, [r0, #4]
 80a124c:	4611      	mov	r1, r2
 80a124e:	f7ff ba73 	b.w	80a0738 <network_get_listen_timeout>

080a1252 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1252:	2200      	movs	r2, #0
 80a1254:	6840      	ldr	r0, [r0, #4]
 80a1256:	4611      	mov	r1, r2
 80a1258:	f7ff ba5e 	b.w	80a0718 <network_listening>

080a125c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a125c:	b570      	push	{r4, r5, r6, lr}
 80a125e:	4615      	mov	r5, r2
 80a1260:	b08e      	sub	sp, #56	; 0x38
 80a1262:	4604      	mov	r4, r0
    IPAddress addr;
 80a1264:	a808      	add	r0, sp, #32
 80a1266:	f7ff fd61 	bl	80a0d2c <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a126a:	2211      	movs	r2, #17
 80a126c:	2100      	movs	r1, #0
 80a126e:	a803      	add	r0, sp, #12
 80a1270:	f001 f862 	bl	80a2338 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1274:	2600      	movs	r6, #0
 80a1276:	4628      	mov	r0, r5
 80a1278:	f001 f88a 	bl	80a2390 <strlen>
 80a127c:	4b0a      	ldr	r3, [pc, #40]	; (80a12a8 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a127e:	9600      	str	r6, [sp, #0]
 80a1280:	b281      	uxth	r1, r0
 80a1282:	685b      	ldr	r3, [r3, #4]
 80a1284:	4628      	mov	r0, r5
 80a1286:	aa03      	add	r2, sp, #12
 80a1288:	f7ff f9da 	bl	80a0640 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a128c:	b130      	cbz	r0, 80a129c <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a128e:	4631      	mov	r1, r6
 80a1290:	4620      	mov	r0, r4
 80a1292:	f7ff fd6b 	bl	80a0d6c <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1296:	4620      	mov	r0, r4
 80a1298:	b00e      	add	sp, #56	; 0x38
 80a129a:	bd70      	pop	{r4, r5, r6, pc}
 80a129c:	4620      	mov	r0, r4
 80a129e:	a903      	add	r1, sp, #12
 80a12a0:	f7ff fd52 	bl	80a0d48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a12a4:	e7f7      	b.n	80a1296 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a12a6:	bf00      	nop
 80a12a8:	20000520 	.word	0x20000520

080a12ac <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a12ac:	4b02      	ldr	r3, [pc, #8]	; (80a12b8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a12ae:	4a03      	ldr	r2, [pc, #12]	; (80a12bc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a12b0:	601a      	str	r2, [r3, #0]
 80a12b2:	2200      	movs	r2, #0
 80a12b4:	605a      	str	r2, [r3, #4]

} // spark
 80a12b6:	4770      	bx	lr
 80a12b8:	20000528 	.word	0x20000528
 80a12bc:	080a2618 	.word	0x080a2618

080a12c0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a12c0:	2300      	movs	r3, #0
 80a12c2:	b507      	push	{r0, r1, r2, lr}
 80a12c4:	461a      	mov	r2, r3
 80a12c6:	4619      	mov	r1, r3
 80a12c8:	9300      	str	r3, [sp, #0]
 80a12ca:	4803      	ldr	r0, [pc, #12]	; (80a12d8 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a12cc:	f7ff fd64 	bl	80a0d98 <_ZN9IPAddressC1Ehhhh>
 80a12d0:	b003      	add	sp, #12
 80a12d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80a12d6:	bf00      	nop
 80a12d8:	20000534 	.word	0x20000534

080a12dc <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a12dc:	4770      	bx	lr
	...

080a12e0 <_Z17acquireWireBufferv>:
	hal_i2c_config_t config = {
 80a12e0:	2300      	movs	r3, #0
{
 80a12e2:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a12e4:	2520      	movs	r5, #32
 80a12e6:	8043      	strh	r3, [r0, #2]
 80a12e8:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a12ea:	4e08      	ldr	r6, [pc, #32]	; (80a130c <_Z17acquireWireBufferv+0x2c>)
{
 80a12ec:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a12ee:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a12f0:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a12f2:	6085      	str	r5, [r0, #8]
 80a12f4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a12f6:	4628      	mov	r0, r5
 80a12f8:	f000 f830 	bl	80a135c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a12fc:	4631      	mov	r1, r6
	};
 80a12fe:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1300:	4628      	mov	r0, r5
 80a1302:	f000 f82b 	bl	80a135c <_ZnajRKSt9nothrow_t>
	};
 80a1306:	60e0      	str	r0, [r4, #12]
}
 80a1308:	4620      	mov	r0, r4
 80a130a:	bd70      	pop	{r4, r5, r6, pc}
 80a130c:	080a264c 	.word	0x080a264c

080a1310 <_Z19__fetch_global_Wirev>:
{
 80a1310:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1312:	4d0e      	ldr	r5, [pc, #56]	; (80a134c <_Z19__fetch_global_Wirev+0x3c>)
{
 80a1314:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1316:	7829      	ldrb	r1, [r5, #0]
 80a1318:	f3bf 8f5b 	dmb	ish
 80a131c:	f011 0401 	ands.w	r4, r1, #1
 80a1320:	d111      	bne.n	80a1346 <_Z19__fetch_global_Wirev+0x36>
 80a1322:	4628      	mov	r0, r5
 80a1324:	f7fe febd 	bl	80a00a2 <__cxa_guard_acquire>
 80a1328:	b168      	cbz	r0, 80a1346 <_Z19__fetch_global_Wirev+0x36>
 80a132a:	a801      	add	r0, sp, #4
 80a132c:	f7ff ffd8 	bl	80a12e0 <_Z17acquireWireBufferv>
 80a1330:	4621      	mov	r1, r4
 80a1332:	aa01      	add	r2, sp, #4
 80a1334:	4806      	ldr	r0, [pc, #24]	; (80a1350 <_Z19__fetch_global_Wirev+0x40>)
 80a1336:	f7ff fea7 	bl	80a1088 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a133a:	4628      	mov	r0, r5
 80a133c:	f7fe feb6 	bl	80a00ac <__cxa_guard_release>
 80a1340:	4804      	ldr	r0, [pc, #16]	; (80a1354 <_Z19__fetch_global_Wirev+0x44>)
 80a1342:	f000 ffe5 	bl	80a2310 <atexit>
	return wire;
}
 80a1346:	4802      	ldr	r0, [pc, #8]	; (80a1350 <_Z19__fetch_global_Wirev+0x40>)
 80a1348:	b007      	add	sp, #28
 80a134a:	bd30      	pop	{r4, r5, pc}
 80a134c:	2000054c 	.word	0x2000054c
 80a1350:	20000550 	.word	0x20000550
 80a1354:	080a12dd 	.word	0x080a12dd

080a1358 <_ZdlPvj>:
 80a1358:	f7fe bea1 	b.w	80a009e <_ZdlPv>

080a135c <_ZnajRKSt9nothrow_t>:
 80a135c:	f7fe be9d 	b.w	80a009a <_Znaj>

080a1360 <__aeabi_drsub>:
 80a1360:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a1364:	e002      	b.n	80a136c <__adddf3>
 80a1366:	bf00      	nop

080a1368 <__aeabi_dsub>:
 80a1368:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a136c <__adddf3>:
 80a136c:	b530      	push	{r4, r5, lr}
 80a136e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a1372:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a1376:	ea94 0f05 	teq	r4, r5
 80a137a:	bf08      	it	eq
 80a137c:	ea90 0f02 	teqeq	r0, r2
 80a1380:	bf1f      	itttt	ne
 80a1382:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a1386:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a138a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a138e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1392:	f000 80e2 	beq.w	80a155a <__adddf3+0x1ee>
 80a1396:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a139a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a139e:	bfb8      	it	lt
 80a13a0:	426d      	neglt	r5, r5
 80a13a2:	dd0c      	ble.n	80a13be <__adddf3+0x52>
 80a13a4:	442c      	add	r4, r5
 80a13a6:	ea80 0202 	eor.w	r2, r0, r2
 80a13aa:	ea81 0303 	eor.w	r3, r1, r3
 80a13ae:	ea82 0000 	eor.w	r0, r2, r0
 80a13b2:	ea83 0101 	eor.w	r1, r3, r1
 80a13b6:	ea80 0202 	eor.w	r2, r0, r2
 80a13ba:	ea81 0303 	eor.w	r3, r1, r3
 80a13be:	2d36      	cmp	r5, #54	; 0x36
 80a13c0:	bf88      	it	hi
 80a13c2:	bd30      	pophi	{r4, r5, pc}
 80a13c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a13c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a13cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a13d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a13d4:	d002      	beq.n	80a13dc <__adddf3+0x70>
 80a13d6:	4240      	negs	r0, r0
 80a13d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a13dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a13e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a13e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a13e8:	d002      	beq.n	80a13f0 <__adddf3+0x84>
 80a13ea:	4252      	negs	r2, r2
 80a13ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a13f0:	ea94 0f05 	teq	r4, r5
 80a13f4:	f000 80a7 	beq.w	80a1546 <__adddf3+0x1da>
 80a13f8:	f1a4 0401 	sub.w	r4, r4, #1
 80a13fc:	f1d5 0e20 	rsbs	lr, r5, #32
 80a1400:	db0d      	blt.n	80a141e <__adddf3+0xb2>
 80a1402:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a1406:	fa22 f205 	lsr.w	r2, r2, r5
 80a140a:	1880      	adds	r0, r0, r2
 80a140c:	f141 0100 	adc.w	r1, r1, #0
 80a1410:	fa03 f20e 	lsl.w	r2, r3, lr
 80a1414:	1880      	adds	r0, r0, r2
 80a1416:	fa43 f305 	asr.w	r3, r3, r5
 80a141a:	4159      	adcs	r1, r3
 80a141c:	e00e      	b.n	80a143c <__adddf3+0xd0>
 80a141e:	f1a5 0520 	sub.w	r5, r5, #32
 80a1422:	f10e 0e20 	add.w	lr, lr, #32
 80a1426:	2a01      	cmp	r2, #1
 80a1428:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a142c:	bf28      	it	cs
 80a142e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a1432:	fa43 f305 	asr.w	r3, r3, r5
 80a1436:	18c0      	adds	r0, r0, r3
 80a1438:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a143c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1440:	d507      	bpl.n	80a1452 <__adddf3+0xe6>
 80a1442:	f04f 0e00 	mov.w	lr, #0
 80a1446:	f1dc 0c00 	rsbs	ip, ip, #0
 80a144a:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a144e:	eb6e 0101 	sbc.w	r1, lr, r1
 80a1452:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a1456:	d31b      	bcc.n	80a1490 <__adddf3+0x124>
 80a1458:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a145c:	d30c      	bcc.n	80a1478 <__adddf3+0x10c>
 80a145e:	0849      	lsrs	r1, r1, #1
 80a1460:	ea5f 0030 	movs.w	r0, r0, rrx
 80a1464:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a1468:	f104 0401 	add.w	r4, r4, #1
 80a146c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a1470:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a1474:	f080 809a 	bcs.w	80a15ac <__adddf3+0x240>
 80a1478:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a147c:	bf08      	it	eq
 80a147e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1482:	f150 0000 	adcs.w	r0, r0, #0
 80a1486:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a148a:	ea41 0105 	orr.w	r1, r1, r5
 80a148e:	bd30      	pop	{r4, r5, pc}
 80a1490:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a1494:	4140      	adcs	r0, r0
 80a1496:	eb41 0101 	adc.w	r1, r1, r1
 80a149a:	3c01      	subs	r4, #1
 80a149c:	bf28      	it	cs
 80a149e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a14a2:	d2e9      	bcs.n	80a1478 <__adddf3+0x10c>
 80a14a4:	f091 0f00 	teq	r1, #0
 80a14a8:	bf04      	itt	eq
 80a14aa:	4601      	moveq	r1, r0
 80a14ac:	2000      	moveq	r0, #0
 80a14ae:	fab1 f381 	clz	r3, r1
 80a14b2:	bf08      	it	eq
 80a14b4:	3320      	addeq	r3, #32
 80a14b6:	f1a3 030b 	sub.w	r3, r3, #11
 80a14ba:	f1b3 0220 	subs.w	r2, r3, #32
 80a14be:	da0c      	bge.n	80a14da <__adddf3+0x16e>
 80a14c0:	320c      	adds	r2, #12
 80a14c2:	dd08      	ble.n	80a14d6 <__adddf3+0x16a>
 80a14c4:	f102 0c14 	add.w	ip, r2, #20
 80a14c8:	f1c2 020c 	rsb	r2, r2, #12
 80a14cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80a14d0:	fa21 f102 	lsr.w	r1, r1, r2
 80a14d4:	e00c      	b.n	80a14f0 <__adddf3+0x184>
 80a14d6:	f102 0214 	add.w	r2, r2, #20
 80a14da:	bfd8      	it	le
 80a14dc:	f1c2 0c20 	rsble	ip, r2, #32
 80a14e0:	fa01 f102 	lsl.w	r1, r1, r2
 80a14e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a14e8:	bfdc      	itt	le
 80a14ea:	ea41 010c 	orrle.w	r1, r1, ip
 80a14ee:	4090      	lslle	r0, r2
 80a14f0:	1ae4      	subs	r4, r4, r3
 80a14f2:	bfa2      	ittt	ge
 80a14f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a14f8:	4329      	orrge	r1, r5
 80a14fa:	bd30      	popge	{r4, r5, pc}
 80a14fc:	ea6f 0404 	mvn.w	r4, r4
 80a1500:	3c1f      	subs	r4, #31
 80a1502:	da1c      	bge.n	80a153e <__adddf3+0x1d2>
 80a1504:	340c      	adds	r4, #12
 80a1506:	dc0e      	bgt.n	80a1526 <__adddf3+0x1ba>
 80a1508:	f104 0414 	add.w	r4, r4, #20
 80a150c:	f1c4 0220 	rsb	r2, r4, #32
 80a1510:	fa20 f004 	lsr.w	r0, r0, r4
 80a1514:	fa01 f302 	lsl.w	r3, r1, r2
 80a1518:	ea40 0003 	orr.w	r0, r0, r3
 80a151c:	fa21 f304 	lsr.w	r3, r1, r4
 80a1520:	ea45 0103 	orr.w	r1, r5, r3
 80a1524:	bd30      	pop	{r4, r5, pc}
 80a1526:	f1c4 040c 	rsb	r4, r4, #12
 80a152a:	f1c4 0220 	rsb	r2, r4, #32
 80a152e:	fa20 f002 	lsr.w	r0, r0, r2
 80a1532:	fa01 f304 	lsl.w	r3, r1, r4
 80a1536:	ea40 0003 	orr.w	r0, r0, r3
 80a153a:	4629      	mov	r1, r5
 80a153c:	bd30      	pop	{r4, r5, pc}
 80a153e:	fa21 f004 	lsr.w	r0, r1, r4
 80a1542:	4629      	mov	r1, r5
 80a1544:	bd30      	pop	{r4, r5, pc}
 80a1546:	f094 0f00 	teq	r4, #0
 80a154a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a154e:	bf06      	itte	eq
 80a1550:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a1554:	3401      	addeq	r4, #1
 80a1556:	3d01      	subne	r5, #1
 80a1558:	e74e      	b.n	80a13f8 <__adddf3+0x8c>
 80a155a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a155e:	bf18      	it	ne
 80a1560:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1564:	d029      	beq.n	80a15ba <__adddf3+0x24e>
 80a1566:	ea94 0f05 	teq	r4, r5
 80a156a:	bf08      	it	eq
 80a156c:	ea90 0f02 	teqeq	r0, r2
 80a1570:	d005      	beq.n	80a157e <__adddf3+0x212>
 80a1572:	ea54 0c00 	orrs.w	ip, r4, r0
 80a1576:	bf04      	itt	eq
 80a1578:	4619      	moveq	r1, r3
 80a157a:	4610      	moveq	r0, r2
 80a157c:	bd30      	pop	{r4, r5, pc}
 80a157e:	ea91 0f03 	teq	r1, r3
 80a1582:	bf1e      	ittt	ne
 80a1584:	2100      	movne	r1, #0
 80a1586:	2000      	movne	r0, #0
 80a1588:	bd30      	popne	{r4, r5, pc}
 80a158a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a158e:	d105      	bne.n	80a159c <__adddf3+0x230>
 80a1590:	0040      	lsls	r0, r0, #1
 80a1592:	4149      	adcs	r1, r1
 80a1594:	bf28      	it	cs
 80a1596:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a159a:	bd30      	pop	{r4, r5, pc}
 80a159c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a15a0:	bf3c      	itt	cc
 80a15a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a15a6:	bd30      	popcc	{r4, r5, pc}
 80a15a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a15ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a15b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a15b4:	f04f 0000 	mov.w	r0, #0
 80a15b8:	bd30      	pop	{r4, r5, pc}
 80a15ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a15be:	bf1a      	itte	ne
 80a15c0:	4619      	movne	r1, r3
 80a15c2:	4610      	movne	r0, r2
 80a15c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a15c8:	bf1c      	itt	ne
 80a15ca:	460b      	movne	r3, r1
 80a15cc:	4602      	movne	r2, r0
 80a15ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a15d2:	bf06      	itte	eq
 80a15d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a15d8:	ea91 0f03 	teqeq	r1, r3
 80a15dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a15e0:	bd30      	pop	{r4, r5, pc}
 80a15e2:	bf00      	nop

080a15e4 <__aeabi_ui2d>:
 80a15e4:	f090 0f00 	teq	r0, #0
 80a15e8:	bf04      	itt	eq
 80a15ea:	2100      	moveq	r1, #0
 80a15ec:	4770      	bxeq	lr
 80a15ee:	b530      	push	{r4, r5, lr}
 80a15f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a15f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a15f8:	f04f 0500 	mov.w	r5, #0
 80a15fc:	f04f 0100 	mov.w	r1, #0
 80a1600:	e750      	b.n	80a14a4 <__adddf3+0x138>
 80a1602:	bf00      	nop

080a1604 <__aeabi_i2d>:
 80a1604:	f090 0f00 	teq	r0, #0
 80a1608:	bf04      	itt	eq
 80a160a:	2100      	moveq	r1, #0
 80a160c:	4770      	bxeq	lr
 80a160e:	b530      	push	{r4, r5, lr}
 80a1610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1618:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a161c:	bf48      	it	mi
 80a161e:	4240      	negmi	r0, r0
 80a1620:	f04f 0100 	mov.w	r1, #0
 80a1624:	e73e      	b.n	80a14a4 <__adddf3+0x138>
 80a1626:	bf00      	nop

080a1628 <__aeabi_f2d>:
 80a1628:	0042      	lsls	r2, r0, #1
 80a162a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a162e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a1632:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a1636:	bf1f      	itttt	ne
 80a1638:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a163c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1640:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a1644:	4770      	bxne	lr
 80a1646:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a164a:	bf08      	it	eq
 80a164c:	4770      	bxeq	lr
 80a164e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a1652:	bf04      	itt	eq
 80a1654:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a1658:	4770      	bxeq	lr
 80a165a:	b530      	push	{r4, r5, lr}
 80a165c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a1660:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1668:	e71c      	b.n	80a14a4 <__adddf3+0x138>
 80a166a:	bf00      	nop

080a166c <__aeabi_ul2d>:
 80a166c:	ea50 0201 	orrs.w	r2, r0, r1
 80a1670:	bf08      	it	eq
 80a1672:	4770      	bxeq	lr
 80a1674:	b530      	push	{r4, r5, lr}
 80a1676:	f04f 0500 	mov.w	r5, #0
 80a167a:	e00a      	b.n	80a1692 <__aeabi_l2d+0x16>

080a167c <__aeabi_l2d>:
 80a167c:	ea50 0201 	orrs.w	r2, r0, r1
 80a1680:	bf08      	it	eq
 80a1682:	4770      	bxeq	lr
 80a1684:	b530      	push	{r4, r5, lr}
 80a1686:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a168a:	d502      	bpl.n	80a1692 <__aeabi_l2d+0x16>
 80a168c:	4240      	negs	r0, r0
 80a168e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1692:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1696:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a169a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a169e:	f43f aed8 	beq.w	80a1452 <__adddf3+0xe6>
 80a16a2:	f04f 0203 	mov.w	r2, #3
 80a16a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a16aa:	bf18      	it	ne
 80a16ac:	3203      	addne	r2, #3
 80a16ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a16b2:	bf18      	it	ne
 80a16b4:	3203      	addne	r2, #3
 80a16b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a16ba:	f1c2 0320 	rsb	r3, r2, #32
 80a16be:	fa00 fc03 	lsl.w	ip, r0, r3
 80a16c2:	fa20 f002 	lsr.w	r0, r0, r2
 80a16c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80a16ca:	ea40 000e 	orr.w	r0, r0, lr
 80a16ce:	fa21 f102 	lsr.w	r1, r1, r2
 80a16d2:	4414      	add	r4, r2
 80a16d4:	e6bd      	b.n	80a1452 <__adddf3+0xe6>
 80a16d6:	bf00      	nop

080a16d8 <__aeabi_dmul>:
 80a16d8:	b570      	push	{r4, r5, r6, lr}
 80a16da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a16de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a16e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a16e6:	bf1d      	ittte	ne
 80a16e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a16ec:	ea94 0f0c 	teqne	r4, ip
 80a16f0:	ea95 0f0c 	teqne	r5, ip
 80a16f4:	f000 f8de 	bleq	80a18b4 <__aeabi_dmul+0x1dc>
 80a16f8:	442c      	add	r4, r5
 80a16fa:	ea81 0603 	eor.w	r6, r1, r3
 80a16fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a1702:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a1706:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a170a:	bf18      	it	ne
 80a170c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a1710:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a1718:	d038      	beq.n	80a178c <__aeabi_dmul+0xb4>
 80a171a:	fba0 ce02 	umull	ip, lr, r0, r2
 80a171e:	f04f 0500 	mov.w	r5, #0
 80a1722:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a1726:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a172a:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a172e:	f04f 0600 	mov.w	r6, #0
 80a1732:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a1736:	f09c 0f00 	teq	ip, #0
 80a173a:	bf18      	it	ne
 80a173c:	f04e 0e01 	orrne.w	lr, lr, #1
 80a1740:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a1744:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a1748:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a174c:	d204      	bcs.n	80a1758 <__aeabi_dmul+0x80>
 80a174e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a1752:	416d      	adcs	r5, r5
 80a1754:	eb46 0606 	adc.w	r6, r6, r6
 80a1758:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a175c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a1760:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a1764:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a1768:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a176c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a1770:	bf88      	it	hi
 80a1772:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a1776:	d81e      	bhi.n	80a17b6 <__aeabi_dmul+0xde>
 80a1778:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a177c:	bf08      	it	eq
 80a177e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a1782:	f150 0000 	adcs.w	r0, r0, #0
 80a1786:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a178a:	bd70      	pop	{r4, r5, r6, pc}
 80a178c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a1790:	ea46 0101 	orr.w	r1, r6, r1
 80a1794:	ea40 0002 	orr.w	r0, r0, r2
 80a1798:	ea81 0103 	eor.w	r1, r1, r3
 80a179c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a17a0:	bfc2      	ittt	gt
 80a17a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a17a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a17aa:	bd70      	popgt	{r4, r5, r6, pc}
 80a17ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a17b0:	f04f 0e00 	mov.w	lr, #0
 80a17b4:	3c01      	subs	r4, #1
 80a17b6:	f300 80ab 	bgt.w	80a1910 <__aeabi_dmul+0x238>
 80a17ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a17be:	bfde      	ittt	le
 80a17c0:	2000      	movle	r0, #0
 80a17c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a17c6:	bd70      	pople	{r4, r5, r6, pc}
 80a17c8:	f1c4 0400 	rsb	r4, r4, #0
 80a17cc:	3c20      	subs	r4, #32
 80a17ce:	da35      	bge.n	80a183c <__aeabi_dmul+0x164>
 80a17d0:	340c      	adds	r4, #12
 80a17d2:	dc1b      	bgt.n	80a180c <__aeabi_dmul+0x134>
 80a17d4:	f104 0414 	add.w	r4, r4, #20
 80a17d8:	f1c4 0520 	rsb	r5, r4, #32
 80a17dc:	fa00 f305 	lsl.w	r3, r0, r5
 80a17e0:	fa20 f004 	lsr.w	r0, r0, r4
 80a17e4:	fa01 f205 	lsl.w	r2, r1, r5
 80a17e8:	ea40 0002 	orr.w	r0, r0, r2
 80a17ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a17f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a17f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a17f8:	fa21 f604 	lsr.w	r6, r1, r4
 80a17fc:	eb42 0106 	adc.w	r1, r2, r6
 80a1800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1804:	bf08      	it	eq
 80a1806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a180a:	bd70      	pop	{r4, r5, r6, pc}
 80a180c:	f1c4 040c 	rsb	r4, r4, #12
 80a1810:	f1c4 0520 	rsb	r5, r4, #32
 80a1814:	fa00 f304 	lsl.w	r3, r0, r4
 80a1818:	fa20 f005 	lsr.w	r0, r0, r5
 80a181c:	fa01 f204 	lsl.w	r2, r1, r4
 80a1820:	ea40 0002 	orr.w	r0, r0, r2
 80a1824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1828:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a182c:	f141 0100 	adc.w	r1, r1, #0
 80a1830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1834:	bf08      	it	eq
 80a1836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a183a:	bd70      	pop	{r4, r5, r6, pc}
 80a183c:	f1c4 0520 	rsb	r5, r4, #32
 80a1840:	fa00 f205 	lsl.w	r2, r0, r5
 80a1844:	ea4e 0e02 	orr.w	lr, lr, r2
 80a1848:	fa20 f304 	lsr.w	r3, r0, r4
 80a184c:	fa01 f205 	lsl.w	r2, r1, r5
 80a1850:	ea43 0302 	orr.w	r3, r3, r2
 80a1854:	fa21 f004 	lsr.w	r0, r1, r4
 80a1858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a185c:	fa21 f204 	lsr.w	r2, r1, r4
 80a1860:	ea20 0002 	bic.w	r0, r0, r2
 80a1864:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a1868:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a186c:	bf08      	it	eq
 80a186e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1872:	bd70      	pop	{r4, r5, r6, pc}
 80a1874:	f094 0f00 	teq	r4, #0
 80a1878:	d10f      	bne.n	80a189a <__aeabi_dmul+0x1c2>
 80a187a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a187e:	0040      	lsls	r0, r0, #1
 80a1880:	eb41 0101 	adc.w	r1, r1, r1
 80a1884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1888:	bf08      	it	eq
 80a188a:	3c01      	subeq	r4, #1
 80a188c:	d0f7      	beq.n	80a187e <__aeabi_dmul+0x1a6>
 80a188e:	ea41 0106 	orr.w	r1, r1, r6
 80a1892:	f095 0f00 	teq	r5, #0
 80a1896:	bf18      	it	ne
 80a1898:	4770      	bxne	lr
 80a189a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a189e:	0052      	lsls	r2, r2, #1
 80a18a0:	eb43 0303 	adc.w	r3, r3, r3
 80a18a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a18a8:	bf08      	it	eq
 80a18aa:	3d01      	subeq	r5, #1
 80a18ac:	d0f7      	beq.n	80a189e <__aeabi_dmul+0x1c6>
 80a18ae:	ea43 0306 	orr.w	r3, r3, r6
 80a18b2:	4770      	bx	lr
 80a18b4:	ea94 0f0c 	teq	r4, ip
 80a18b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a18bc:	bf18      	it	ne
 80a18be:	ea95 0f0c 	teqne	r5, ip
 80a18c2:	d00c      	beq.n	80a18de <__aeabi_dmul+0x206>
 80a18c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a18c8:	bf18      	it	ne
 80a18ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a18ce:	d1d1      	bne.n	80a1874 <__aeabi_dmul+0x19c>
 80a18d0:	ea81 0103 	eor.w	r1, r1, r3
 80a18d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a18d8:	f04f 0000 	mov.w	r0, #0
 80a18dc:	bd70      	pop	{r4, r5, r6, pc}
 80a18de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a18e2:	bf06      	itte	eq
 80a18e4:	4610      	moveq	r0, r2
 80a18e6:	4619      	moveq	r1, r3
 80a18e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a18ec:	d019      	beq.n	80a1922 <__aeabi_dmul+0x24a>
 80a18ee:	ea94 0f0c 	teq	r4, ip
 80a18f2:	d102      	bne.n	80a18fa <__aeabi_dmul+0x222>
 80a18f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a18f8:	d113      	bne.n	80a1922 <__aeabi_dmul+0x24a>
 80a18fa:	ea95 0f0c 	teq	r5, ip
 80a18fe:	d105      	bne.n	80a190c <__aeabi_dmul+0x234>
 80a1900:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a1904:	bf1c      	itt	ne
 80a1906:	4610      	movne	r0, r2
 80a1908:	4619      	movne	r1, r3
 80a190a:	d10a      	bne.n	80a1922 <__aeabi_dmul+0x24a>
 80a190c:	ea81 0103 	eor.w	r1, r1, r3
 80a1910:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1914:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a1918:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a191c:	f04f 0000 	mov.w	r0, #0
 80a1920:	bd70      	pop	{r4, r5, r6, pc}
 80a1922:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a1926:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a192a:	bd70      	pop	{r4, r5, r6, pc}

080a192c <__aeabi_ddiv>:
 80a192c:	b570      	push	{r4, r5, r6, lr}
 80a192e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1932:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a1936:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a193a:	bf1d      	ittte	ne
 80a193c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1940:	ea94 0f0c 	teqne	r4, ip
 80a1944:	ea95 0f0c 	teqne	r5, ip
 80a1948:	f000 f8a7 	bleq	80a1a9a <__aeabi_ddiv+0x16e>
 80a194c:	eba4 0405 	sub.w	r4, r4, r5
 80a1950:	ea81 0e03 	eor.w	lr, r1, r3
 80a1954:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a1958:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a195c:	f000 8088 	beq.w	80a1a70 <__aeabi_ddiv+0x144>
 80a1960:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1964:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a1968:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a196c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a1970:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a1974:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a1978:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a197c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a1980:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a1984:	429d      	cmp	r5, r3
 80a1986:	bf08      	it	eq
 80a1988:	4296      	cmpeq	r6, r2
 80a198a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a198e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a1992:	d202      	bcs.n	80a199a <__aeabi_ddiv+0x6e>
 80a1994:	085b      	lsrs	r3, r3, #1
 80a1996:	ea4f 0232 	mov.w	r2, r2, rrx
 80a199a:	1ab6      	subs	r6, r6, r2
 80a199c:	eb65 0503 	sbc.w	r5, r5, r3
 80a19a0:	085b      	lsrs	r3, r3, #1
 80a19a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a19a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a19aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a19ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80a19b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a19b6:	bf22      	ittt	cs
 80a19b8:	1ab6      	subcs	r6, r6, r2
 80a19ba:	4675      	movcs	r5, lr
 80a19bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80a19c0:	085b      	lsrs	r3, r3, #1
 80a19c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a19c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a19ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a19ce:	bf22      	ittt	cs
 80a19d0:	1ab6      	subcs	r6, r6, r2
 80a19d2:	4675      	movcs	r5, lr
 80a19d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a19d8:	085b      	lsrs	r3, r3, #1
 80a19da:	ea4f 0232 	mov.w	r2, r2, rrx
 80a19de:	ebb6 0e02 	subs.w	lr, r6, r2
 80a19e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a19e6:	bf22      	ittt	cs
 80a19e8:	1ab6      	subcs	r6, r6, r2
 80a19ea:	4675      	movcs	r5, lr
 80a19ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a19f0:	085b      	lsrs	r3, r3, #1
 80a19f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a19f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a19fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a19fe:	bf22      	ittt	cs
 80a1a00:	1ab6      	subcs	r6, r6, r2
 80a1a02:	4675      	movcs	r5, lr
 80a1a04:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a1a08:	ea55 0e06 	orrs.w	lr, r5, r6
 80a1a0c:	d018      	beq.n	80a1a40 <__aeabi_ddiv+0x114>
 80a1a0e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a1a12:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a1a16:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a1a1a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a1a1e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a1a22:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a1a26:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a1a2a:	d1c0      	bne.n	80a19ae <__aeabi_ddiv+0x82>
 80a1a2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1a30:	d10b      	bne.n	80a1a4a <__aeabi_ddiv+0x11e>
 80a1a32:	ea41 0100 	orr.w	r1, r1, r0
 80a1a36:	f04f 0000 	mov.w	r0, #0
 80a1a3a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a1a3e:	e7b6      	b.n	80a19ae <__aeabi_ddiv+0x82>
 80a1a40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1a44:	bf04      	itt	eq
 80a1a46:	4301      	orreq	r1, r0
 80a1a48:	2000      	moveq	r0, #0
 80a1a4a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a1a4e:	bf88      	it	hi
 80a1a50:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a1a54:	f63f aeaf 	bhi.w	80a17b6 <__aeabi_dmul+0xde>
 80a1a58:	ebb5 0c03 	subs.w	ip, r5, r3
 80a1a5c:	bf04      	itt	eq
 80a1a5e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a1a62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1a66:	f150 0000 	adcs.w	r0, r0, #0
 80a1a6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1a6e:	bd70      	pop	{r4, r5, r6, pc}
 80a1a70:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a1a74:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a1a78:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a1a7c:	bfc2      	ittt	gt
 80a1a7e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a1a82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a1a86:	bd70      	popgt	{r4, r5, r6, pc}
 80a1a88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1a8c:	f04f 0e00 	mov.w	lr, #0
 80a1a90:	3c01      	subs	r4, #1
 80a1a92:	e690      	b.n	80a17b6 <__aeabi_dmul+0xde>
 80a1a94:	ea45 0e06 	orr.w	lr, r5, r6
 80a1a98:	e68d      	b.n	80a17b6 <__aeabi_dmul+0xde>
 80a1a9a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a1a9e:	ea94 0f0c 	teq	r4, ip
 80a1aa2:	bf08      	it	eq
 80a1aa4:	ea95 0f0c 	teqeq	r5, ip
 80a1aa8:	f43f af3b 	beq.w	80a1922 <__aeabi_dmul+0x24a>
 80a1aac:	ea94 0f0c 	teq	r4, ip
 80a1ab0:	d10a      	bne.n	80a1ac8 <__aeabi_ddiv+0x19c>
 80a1ab2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1ab6:	f47f af34 	bne.w	80a1922 <__aeabi_dmul+0x24a>
 80a1aba:	ea95 0f0c 	teq	r5, ip
 80a1abe:	f47f af25 	bne.w	80a190c <__aeabi_dmul+0x234>
 80a1ac2:	4610      	mov	r0, r2
 80a1ac4:	4619      	mov	r1, r3
 80a1ac6:	e72c      	b.n	80a1922 <__aeabi_dmul+0x24a>
 80a1ac8:	ea95 0f0c 	teq	r5, ip
 80a1acc:	d106      	bne.n	80a1adc <__aeabi_ddiv+0x1b0>
 80a1ace:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a1ad2:	f43f aefd 	beq.w	80a18d0 <__aeabi_dmul+0x1f8>
 80a1ad6:	4610      	mov	r0, r2
 80a1ad8:	4619      	mov	r1, r3
 80a1ada:	e722      	b.n	80a1922 <__aeabi_dmul+0x24a>
 80a1adc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1ae0:	bf18      	it	ne
 80a1ae2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a1ae6:	f47f aec5 	bne.w	80a1874 <__aeabi_dmul+0x19c>
 80a1aea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a1aee:	f47f af0d 	bne.w	80a190c <__aeabi_dmul+0x234>
 80a1af2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a1af6:	f47f aeeb 	bne.w	80a18d0 <__aeabi_dmul+0x1f8>
 80a1afa:	e712      	b.n	80a1922 <__aeabi_dmul+0x24a>

080a1afc <__gedf2>:
 80a1afc:	f04f 3cff 	mov.w	ip, #4294967295
 80a1b00:	e006      	b.n	80a1b10 <__cmpdf2+0x4>
 80a1b02:	bf00      	nop

080a1b04 <__ledf2>:
 80a1b04:	f04f 0c01 	mov.w	ip, #1
 80a1b08:	e002      	b.n	80a1b10 <__cmpdf2+0x4>
 80a1b0a:	bf00      	nop

080a1b0c <__cmpdf2>:
 80a1b0c:	f04f 0c01 	mov.w	ip, #1
 80a1b10:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a1b14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a1b18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a1b1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a1b20:	bf18      	it	ne
 80a1b22:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a1b26:	d01b      	beq.n	80a1b60 <__cmpdf2+0x54>
 80a1b28:	b001      	add	sp, #4
 80a1b2a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a1b2e:	bf0c      	ite	eq
 80a1b30:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a1b34:	ea91 0f03 	teqne	r1, r3
 80a1b38:	bf02      	ittt	eq
 80a1b3a:	ea90 0f02 	teqeq	r0, r2
 80a1b3e:	2000      	moveq	r0, #0
 80a1b40:	4770      	bxeq	lr
 80a1b42:	f110 0f00 	cmn.w	r0, #0
 80a1b46:	ea91 0f03 	teq	r1, r3
 80a1b4a:	bf58      	it	pl
 80a1b4c:	4299      	cmppl	r1, r3
 80a1b4e:	bf08      	it	eq
 80a1b50:	4290      	cmpeq	r0, r2
 80a1b52:	bf2c      	ite	cs
 80a1b54:	17d8      	asrcs	r0, r3, #31
 80a1b56:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a1b5a:	f040 0001 	orr.w	r0, r0, #1
 80a1b5e:	4770      	bx	lr
 80a1b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a1b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a1b68:	d102      	bne.n	80a1b70 <__cmpdf2+0x64>
 80a1b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a1b6e:	d107      	bne.n	80a1b80 <__cmpdf2+0x74>
 80a1b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a1b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a1b78:	d1d6      	bne.n	80a1b28 <__cmpdf2+0x1c>
 80a1b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a1b7e:	d0d3      	beq.n	80a1b28 <__cmpdf2+0x1c>
 80a1b80:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a1b84:	4770      	bx	lr
 80a1b86:	bf00      	nop

080a1b88 <__aeabi_cdrcmple>:
 80a1b88:	4684      	mov	ip, r0
 80a1b8a:	4610      	mov	r0, r2
 80a1b8c:	4662      	mov	r2, ip
 80a1b8e:	468c      	mov	ip, r1
 80a1b90:	4619      	mov	r1, r3
 80a1b92:	4663      	mov	r3, ip
 80a1b94:	e000      	b.n	80a1b98 <__aeabi_cdcmpeq>
 80a1b96:	bf00      	nop

080a1b98 <__aeabi_cdcmpeq>:
 80a1b98:	b501      	push	{r0, lr}
 80a1b9a:	f7ff ffb7 	bl	80a1b0c <__cmpdf2>
 80a1b9e:	2800      	cmp	r0, #0
 80a1ba0:	bf48      	it	mi
 80a1ba2:	f110 0f00 	cmnmi.w	r0, #0
 80a1ba6:	bd01      	pop	{r0, pc}

080a1ba8 <__aeabi_dcmpeq>:
 80a1ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1bac:	f7ff fff4 	bl	80a1b98 <__aeabi_cdcmpeq>
 80a1bb0:	bf0c      	ite	eq
 80a1bb2:	2001      	moveq	r0, #1
 80a1bb4:	2000      	movne	r0, #0
 80a1bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1bba:	bf00      	nop

080a1bbc <__aeabi_dcmplt>:
 80a1bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1bc0:	f7ff ffea 	bl	80a1b98 <__aeabi_cdcmpeq>
 80a1bc4:	bf34      	ite	cc
 80a1bc6:	2001      	movcc	r0, #1
 80a1bc8:	2000      	movcs	r0, #0
 80a1bca:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1bce:	bf00      	nop

080a1bd0 <__aeabi_dcmple>:
 80a1bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1bd4:	f7ff ffe0 	bl	80a1b98 <__aeabi_cdcmpeq>
 80a1bd8:	bf94      	ite	ls
 80a1bda:	2001      	movls	r0, #1
 80a1bdc:	2000      	movhi	r0, #0
 80a1bde:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1be2:	bf00      	nop

080a1be4 <__aeabi_dcmpge>:
 80a1be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1be8:	f7ff ffce 	bl	80a1b88 <__aeabi_cdrcmple>
 80a1bec:	bf94      	ite	ls
 80a1bee:	2001      	movls	r0, #1
 80a1bf0:	2000      	movhi	r0, #0
 80a1bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1bf6:	bf00      	nop

080a1bf8 <__aeabi_dcmpgt>:
 80a1bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1bfc:	f7ff ffc4 	bl	80a1b88 <__aeabi_cdrcmple>
 80a1c00:	bf34      	ite	cc
 80a1c02:	2001      	movcc	r0, #1
 80a1c04:	2000      	movcs	r0, #0
 80a1c06:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1c0a:	bf00      	nop

080a1c0c <__aeabi_dcmpun>:
 80a1c0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a1c10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a1c14:	d102      	bne.n	80a1c1c <__aeabi_dcmpun+0x10>
 80a1c16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a1c1a:	d10a      	bne.n	80a1c32 <__aeabi_dcmpun+0x26>
 80a1c1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a1c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a1c24:	d102      	bne.n	80a1c2c <__aeabi_dcmpun+0x20>
 80a1c26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a1c2a:	d102      	bne.n	80a1c32 <__aeabi_dcmpun+0x26>
 80a1c2c:	f04f 0000 	mov.w	r0, #0
 80a1c30:	4770      	bx	lr
 80a1c32:	f04f 0001 	mov.w	r0, #1
 80a1c36:	4770      	bx	lr

080a1c38 <__aeabi_d2iz>:
 80a1c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a1c3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a1c40:	d215      	bcs.n	80a1c6e <__aeabi_d2iz+0x36>
 80a1c42:	d511      	bpl.n	80a1c68 <__aeabi_d2iz+0x30>
 80a1c44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a1c48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a1c4c:	d912      	bls.n	80a1c74 <__aeabi_d2iz+0x3c>
 80a1c4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a1c52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a1c56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a1c5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1c5e:	fa23 f002 	lsr.w	r0, r3, r2
 80a1c62:	bf18      	it	ne
 80a1c64:	4240      	negne	r0, r0
 80a1c66:	4770      	bx	lr
 80a1c68:	f04f 0000 	mov.w	r0, #0
 80a1c6c:	4770      	bx	lr
 80a1c6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a1c72:	d105      	bne.n	80a1c80 <__aeabi_d2iz+0x48>
 80a1c74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a1c78:	bf08      	it	eq
 80a1c7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a1c7e:	4770      	bx	lr
 80a1c80:	f04f 0000 	mov.w	r0, #0
 80a1c84:	4770      	bx	lr
 80a1c86:	bf00      	nop

080a1c88 <__aeabi_d2uiz>:
 80a1c88:	004a      	lsls	r2, r1, #1
 80a1c8a:	d211      	bcs.n	80a1cb0 <__aeabi_d2uiz+0x28>
 80a1c8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a1c90:	d211      	bcs.n	80a1cb6 <__aeabi_d2uiz+0x2e>
 80a1c92:	d50d      	bpl.n	80a1cb0 <__aeabi_d2uiz+0x28>
 80a1c94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a1c98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a1c9c:	d40e      	bmi.n	80a1cbc <__aeabi_d2uiz+0x34>
 80a1c9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a1ca2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a1ca6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a1caa:	fa23 f002 	lsr.w	r0, r3, r2
 80a1cae:	4770      	bx	lr
 80a1cb0:	f04f 0000 	mov.w	r0, #0
 80a1cb4:	4770      	bx	lr
 80a1cb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a1cba:	d102      	bne.n	80a1cc2 <__aeabi_d2uiz+0x3a>
 80a1cbc:	f04f 30ff 	mov.w	r0, #4294967295
 80a1cc0:	4770      	bx	lr
 80a1cc2:	f04f 0000 	mov.w	r0, #0
 80a1cc6:	4770      	bx	lr

080a1cc8 <__aeabi_d2f>:
 80a1cc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a1ccc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a1cd0:	bf24      	itt	cs
 80a1cd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a1cd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a1cda:	d90d      	bls.n	80a1cf8 <__aeabi_d2f+0x30>
 80a1cdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a1ce0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a1ce4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a1ce8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a1cec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a1cf0:	bf08      	it	eq
 80a1cf2:	f020 0001 	biceq.w	r0, r0, #1
 80a1cf6:	4770      	bx	lr
 80a1cf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a1cfc:	d121      	bne.n	80a1d42 <__aeabi_d2f+0x7a>
 80a1cfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a1d02:	bfbc      	itt	lt
 80a1d04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a1d08:	4770      	bxlt	lr
 80a1d0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1d0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a1d12:	f1c2 0218 	rsb	r2, r2, #24
 80a1d16:	f1c2 0c20 	rsb	ip, r2, #32
 80a1d1a:	fa10 f30c 	lsls.w	r3, r0, ip
 80a1d1e:	fa20 f002 	lsr.w	r0, r0, r2
 80a1d22:	bf18      	it	ne
 80a1d24:	f040 0001 	orrne.w	r0, r0, #1
 80a1d28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a1d2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a1d30:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a1d34:	ea40 000c 	orr.w	r0, r0, ip
 80a1d38:	fa23 f302 	lsr.w	r3, r3, r2
 80a1d3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a1d40:	e7cc      	b.n	80a1cdc <__aeabi_d2f+0x14>
 80a1d42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a1d46:	d107      	bne.n	80a1d58 <__aeabi_d2f+0x90>
 80a1d48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a1d4c:	bf1e      	ittt	ne
 80a1d4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a1d52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a1d56:	4770      	bxne	lr
 80a1d58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a1d5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a1d60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1d64:	4770      	bx	lr
 80a1d66:	bf00      	nop

080a1d68 <__aeabi_frsub>:
 80a1d68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a1d6c:	e002      	b.n	80a1d74 <__addsf3>
 80a1d6e:	bf00      	nop

080a1d70 <__aeabi_fsub>:
 80a1d70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a1d74 <__addsf3>:
 80a1d74:	0042      	lsls	r2, r0, #1
 80a1d76:	bf1f      	itttt	ne
 80a1d78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a1d7c:	ea92 0f03 	teqne	r2, r3
 80a1d80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a1d84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a1d88:	d06a      	beq.n	80a1e60 <__addsf3+0xec>
 80a1d8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a1d8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a1d92:	bfc1      	itttt	gt
 80a1d94:	18d2      	addgt	r2, r2, r3
 80a1d96:	4041      	eorgt	r1, r0
 80a1d98:	4048      	eorgt	r0, r1
 80a1d9a:	4041      	eorgt	r1, r0
 80a1d9c:	bfb8      	it	lt
 80a1d9e:	425b      	neglt	r3, r3
 80a1da0:	2b19      	cmp	r3, #25
 80a1da2:	bf88      	it	hi
 80a1da4:	4770      	bxhi	lr
 80a1da6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a1daa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1dae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a1db2:	bf18      	it	ne
 80a1db4:	4240      	negne	r0, r0
 80a1db6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1dba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a1dbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a1dc2:	bf18      	it	ne
 80a1dc4:	4249      	negne	r1, r1
 80a1dc6:	ea92 0f03 	teq	r2, r3
 80a1dca:	d03f      	beq.n	80a1e4c <__addsf3+0xd8>
 80a1dcc:	f1a2 0201 	sub.w	r2, r2, #1
 80a1dd0:	fa41 fc03 	asr.w	ip, r1, r3
 80a1dd4:	eb10 000c 	adds.w	r0, r0, ip
 80a1dd8:	f1c3 0320 	rsb	r3, r3, #32
 80a1ddc:	fa01 f103 	lsl.w	r1, r1, r3
 80a1de0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a1de4:	d502      	bpl.n	80a1dec <__addsf3+0x78>
 80a1de6:	4249      	negs	r1, r1
 80a1de8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a1dec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a1df0:	d313      	bcc.n	80a1e1a <__addsf3+0xa6>
 80a1df2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a1df6:	d306      	bcc.n	80a1e06 <__addsf3+0x92>
 80a1df8:	0840      	lsrs	r0, r0, #1
 80a1dfa:	ea4f 0131 	mov.w	r1, r1, rrx
 80a1dfe:	f102 0201 	add.w	r2, r2, #1
 80a1e02:	2afe      	cmp	r2, #254	; 0xfe
 80a1e04:	d251      	bcs.n	80a1eaa <__addsf3+0x136>
 80a1e06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a1e0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a1e0e:	bf08      	it	eq
 80a1e10:	f020 0001 	biceq.w	r0, r0, #1
 80a1e14:	ea40 0003 	orr.w	r0, r0, r3
 80a1e18:	4770      	bx	lr
 80a1e1a:	0049      	lsls	r1, r1, #1
 80a1e1c:	eb40 0000 	adc.w	r0, r0, r0
 80a1e20:	3a01      	subs	r2, #1
 80a1e22:	bf28      	it	cs
 80a1e24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a1e28:	d2ed      	bcs.n	80a1e06 <__addsf3+0x92>
 80a1e2a:	fab0 fc80 	clz	ip, r0
 80a1e2e:	f1ac 0c08 	sub.w	ip, ip, #8
 80a1e32:	ebb2 020c 	subs.w	r2, r2, ip
 80a1e36:	fa00 f00c 	lsl.w	r0, r0, ip
 80a1e3a:	bfaa      	itet	ge
 80a1e3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a1e40:	4252      	neglt	r2, r2
 80a1e42:	4318      	orrge	r0, r3
 80a1e44:	bfbc      	itt	lt
 80a1e46:	40d0      	lsrlt	r0, r2
 80a1e48:	4318      	orrlt	r0, r3
 80a1e4a:	4770      	bx	lr
 80a1e4c:	f092 0f00 	teq	r2, #0
 80a1e50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a1e54:	bf06      	itte	eq
 80a1e56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a1e5a:	3201      	addeq	r2, #1
 80a1e5c:	3b01      	subne	r3, #1
 80a1e5e:	e7b5      	b.n	80a1dcc <__addsf3+0x58>
 80a1e60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a1e64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a1e68:	bf18      	it	ne
 80a1e6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a1e6e:	d021      	beq.n	80a1eb4 <__addsf3+0x140>
 80a1e70:	ea92 0f03 	teq	r2, r3
 80a1e74:	d004      	beq.n	80a1e80 <__addsf3+0x10c>
 80a1e76:	f092 0f00 	teq	r2, #0
 80a1e7a:	bf08      	it	eq
 80a1e7c:	4608      	moveq	r0, r1
 80a1e7e:	4770      	bx	lr
 80a1e80:	ea90 0f01 	teq	r0, r1
 80a1e84:	bf1c      	itt	ne
 80a1e86:	2000      	movne	r0, #0
 80a1e88:	4770      	bxne	lr
 80a1e8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a1e8e:	d104      	bne.n	80a1e9a <__addsf3+0x126>
 80a1e90:	0040      	lsls	r0, r0, #1
 80a1e92:	bf28      	it	cs
 80a1e94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a1e98:	4770      	bx	lr
 80a1e9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a1e9e:	bf3c      	itt	cc
 80a1ea0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a1ea4:	4770      	bxcc	lr
 80a1ea6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a1eaa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a1eae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1eb2:	4770      	bx	lr
 80a1eb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a1eb8:	bf16      	itet	ne
 80a1eba:	4608      	movne	r0, r1
 80a1ebc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a1ec0:	4601      	movne	r1, r0
 80a1ec2:	0242      	lsls	r2, r0, #9
 80a1ec4:	bf06      	itte	eq
 80a1ec6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a1eca:	ea90 0f01 	teqeq	r0, r1
 80a1ece:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a1ed2:	4770      	bx	lr

080a1ed4 <__aeabi_ui2f>:
 80a1ed4:	f04f 0300 	mov.w	r3, #0
 80a1ed8:	e004      	b.n	80a1ee4 <__aeabi_i2f+0x8>
 80a1eda:	bf00      	nop

080a1edc <__aeabi_i2f>:
 80a1edc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a1ee0:	bf48      	it	mi
 80a1ee2:	4240      	negmi	r0, r0
 80a1ee4:	ea5f 0c00 	movs.w	ip, r0
 80a1ee8:	bf08      	it	eq
 80a1eea:	4770      	bxeq	lr
 80a1eec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a1ef0:	4601      	mov	r1, r0
 80a1ef2:	f04f 0000 	mov.w	r0, #0
 80a1ef6:	e01c      	b.n	80a1f32 <__aeabi_l2f+0x2a>

080a1ef8 <__aeabi_ul2f>:
 80a1ef8:	ea50 0201 	orrs.w	r2, r0, r1
 80a1efc:	bf08      	it	eq
 80a1efe:	4770      	bxeq	lr
 80a1f00:	f04f 0300 	mov.w	r3, #0
 80a1f04:	e00a      	b.n	80a1f1c <__aeabi_l2f+0x14>
 80a1f06:	bf00      	nop

080a1f08 <__aeabi_l2f>:
 80a1f08:	ea50 0201 	orrs.w	r2, r0, r1
 80a1f0c:	bf08      	it	eq
 80a1f0e:	4770      	bxeq	lr
 80a1f10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a1f14:	d502      	bpl.n	80a1f1c <__aeabi_l2f+0x14>
 80a1f16:	4240      	negs	r0, r0
 80a1f18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1f1c:	ea5f 0c01 	movs.w	ip, r1
 80a1f20:	bf02      	ittt	eq
 80a1f22:	4684      	moveq	ip, r0
 80a1f24:	4601      	moveq	r1, r0
 80a1f26:	2000      	moveq	r0, #0
 80a1f28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a1f2c:	bf08      	it	eq
 80a1f2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a1f32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a1f36:	fabc f28c 	clz	r2, ip
 80a1f3a:	3a08      	subs	r2, #8
 80a1f3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a1f40:	db10      	blt.n	80a1f64 <__aeabi_l2f+0x5c>
 80a1f42:	fa01 fc02 	lsl.w	ip, r1, r2
 80a1f46:	4463      	add	r3, ip
 80a1f48:	fa00 fc02 	lsl.w	ip, r0, r2
 80a1f4c:	f1c2 0220 	rsb	r2, r2, #32
 80a1f50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1f54:	fa20 f202 	lsr.w	r2, r0, r2
 80a1f58:	eb43 0002 	adc.w	r0, r3, r2
 80a1f5c:	bf08      	it	eq
 80a1f5e:	f020 0001 	biceq.w	r0, r0, #1
 80a1f62:	4770      	bx	lr
 80a1f64:	f102 0220 	add.w	r2, r2, #32
 80a1f68:	fa01 fc02 	lsl.w	ip, r1, r2
 80a1f6c:	f1c2 0220 	rsb	r2, r2, #32
 80a1f70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a1f74:	fa21 f202 	lsr.w	r2, r1, r2
 80a1f78:	eb43 0002 	adc.w	r0, r3, r2
 80a1f7c:	bf08      	it	eq
 80a1f7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a1f82:	4770      	bx	lr

080a1f84 <__aeabi_fmul>:
 80a1f84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1f88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a1f8c:	bf1e      	ittt	ne
 80a1f8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a1f92:	ea92 0f0c 	teqne	r2, ip
 80a1f96:	ea93 0f0c 	teqne	r3, ip
 80a1f9a:	d06f      	beq.n	80a207c <__aeabi_fmul+0xf8>
 80a1f9c:	441a      	add	r2, r3
 80a1f9e:	ea80 0c01 	eor.w	ip, r0, r1
 80a1fa2:	0240      	lsls	r0, r0, #9
 80a1fa4:	bf18      	it	ne
 80a1fa6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a1faa:	d01e      	beq.n	80a1fea <__aeabi_fmul+0x66>
 80a1fac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a1fb0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a1fb4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a1fb8:	fba0 3101 	umull	r3, r1, r0, r1
 80a1fbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a1fc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a1fc4:	bf3e      	ittt	cc
 80a1fc6:	0049      	lslcc	r1, r1, #1
 80a1fc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a1fcc:	005b      	lslcc	r3, r3, #1
 80a1fce:	ea40 0001 	orr.w	r0, r0, r1
 80a1fd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a1fd6:	2afd      	cmp	r2, #253	; 0xfd
 80a1fd8:	d81d      	bhi.n	80a2016 <__aeabi_fmul+0x92>
 80a1fda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a1fde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a1fe2:	bf08      	it	eq
 80a1fe4:	f020 0001 	biceq.w	r0, r0, #1
 80a1fe8:	4770      	bx	lr
 80a1fea:	f090 0f00 	teq	r0, #0
 80a1fee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a1ff2:	bf08      	it	eq
 80a1ff4:	0249      	lsleq	r1, r1, #9
 80a1ff6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a1ffa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a1ffe:	3a7f      	subs	r2, #127	; 0x7f
 80a2000:	bfc2      	ittt	gt
 80a2002:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2006:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a200a:	4770      	bxgt	lr
 80a200c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2010:	f04f 0300 	mov.w	r3, #0
 80a2014:	3a01      	subs	r2, #1
 80a2016:	dc5d      	bgt.n	80a20d4 <__aeabi_fmul+0x150>
 80a2018:	f112 0f19 	cmn.w	r2, #25
 80a201c:	bfdc      	itt	le
 80a201e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a2022:	4770      	bxle	lr
 80a2024:	f1c2 0200 	rsb	r2, r2, #0
 80a2028:	0041      	lsls	r1, r0, #1
 80a202a:	fa21 f102 	lsr.w	r1, r1, r2
 80a202e:	f1c2 0220 	rsb	r2, r2, #32
 80a2032:	fa00 fc02 	lsl.w	ip, r0, r2
 80a2036:	ea5f 0031 	movs.w	r0, r1, rrx
 80a203a:	f140 0000 	adc.w	r0, r0, #0
 80a203e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a2042:	bf08      	it	eq
 80a2044:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a2048:	4770      	bx	lr
 80a204a:	f092 0f00 	teq	r2, #0
 80a204e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2052:	bf02      	ittt	eq
 80a2054:	0040      	lsleq	r0, r0, #1
 80a2056:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a205a:	3a01      	subeq	r2, #1
 80a205c:	d0f9      	beq.n	80a2052 <__aeabi_fmul+0xce>
 80a205e:	ea40 000c 	orr.w	r0, r0, ip
 80a2062:	f093 0f00 	teq	r3, #0
 80a2066:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a206a:	bf02      	ittt	eq
 80a206c:	0049      	lsleq	r1, r1, #1
 80a206e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2072:	3b01      	subeq	r3, #1
 80a2074:	d0f9      	beq.n	80a206a <__aeabi_fmul+0xe6>
 80a2076:	ea41 010c 	orr.w	r1, r1, ip
 80a207a:	e78f      	b.n	80a1f9c <__aeabi_fmul+0x18>
 80a207c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2080:	ea92 0f0c 	teq	r2, ip
 80a2084:	bf18      	it	ne
 80a2086:	ea93 0f0c 	teqne	r3, ip
 80a208a:	d00a      	beq.n	80a20a2 <__aeabi_fmul+0x11e>
 80a208c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2090:	bf18      	it	ne
 80a2092:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2096:	d1d8      	bne.n	80a204a <__aeabi_fmul+0xc6>
 80a2098:	ea80 0001 	eor.w	r0, r0, r1
 80a209c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a20a0:	4770      	bx	lr
 80a20a2:	f090 0f00 	teq	r0, #0
 80a20a6:	bf17      	itett	ne
 80a20a8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a20ac:	4608      	moveq	r0, r1
 80a20ae:	f091 0f00 	teqne	r1, #0
 80a20b2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a20b6:	d014      	beq.n	80a20e2 <__aeabi_fmul+0x15e>
 80a20b8:	ea92 0f0c 	teq	r2, ip
 80a20bc:	d101      	bne.n	80a20c2 <__aeabi_fmul+0x13e>
 80a20be:	0242      	lsls	r2, r0, #9
 80a20c0:	d10f      	bne.n	80a20e2 <__aeabi_fmul+0x15e>
 80a20c2:	ea93 0f0c 	teq	r3, ip
 80a20c6:	d103      	bne.n	80a20d0 <__aeabi_fmul+0x14c>
 80a20c8:	024b      	lsls	r3, r1, #9
 80a20ca:	bf18      	it	ne
 80a20cc:	4608      	movne	r0, r1
 80a20ce:	d108      	bne.n	80a20e2 <__aeabi_fmul+0x15e>
 80a20d0:	ea80 0001 	eor.w	r0, r0, r1
 80a20d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a20d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a20dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a20e0:	4770      	bx	lr
 80a20e2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a20e6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a20ea:	4770      	bx	lr

080a20ec <__aeabi_fdiv>:
 80a20ec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a20f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a20f4:	bf1e      	ittt	ne
 80a20f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a20fa:	ea92 0f0c 	teqne	r2, ip
 80a20fe:	ea93 0f0c 	teqne	r3, ip
 80a2102:	d069      	beq.n	80a21d8 <__aeabi_fdiv+0xec>
 80a2104:	eba2 0203 	sub.w	r2, r2, r3
 80a2108:	ea80 0c01 	eor.w	ip, r0, r1
 80a210c:	0249      	lsls	r1, r1, #9
 80a210e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a2112:	d037      	beq.n	80a2184 <__aeabi_fdiv+0x98>
 80a2114:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a2118:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a211c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a2120:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2124:	428b      	cmp	r3, r1
 80a2126:	bf38      	it	cc
 80a2128:	005b      	lslcc	r3, r3, #1
 80a212a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a212e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a2132:	428b      	cmp	r3, r1
 80a2134:	bf24      	itt	cs
 80a2136:	1a5b      	subcs	r3, r3, r1
 80a2138:	ea40 000c 	orrcs.w	r0, r0, ip
 80a213c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a2140:	bf24      	itt	cs
 80a2142:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a2146:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a214a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a214e:	bf24      	itt	cs
 80a2150:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a2154:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2158:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a215c:	bf24      	itt	cs
 80a215e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a2162:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2166:	011b      	lsls	r3, r3, #4
 80a2168:	bf18      	it	ne
 80a216a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a216e:	d1e0      	bne.n	80a2132 <__aeabi_fdiv+0x46>
 80a2170:	2afd      	cmp	r2, #253	; 0xfd
 80a2172:	f63f af50 	bhi.w	80a2016 <__aeabi_fmul+0x92>
 80a2176:	428b      	cmp	r3, r1
 80a2178:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a217c:	bf08      	it	eq
 80a217e:	f020 0001 	biceq.w	r0, r0, #1
 80a2182:	4770      	bx	lr
 80a2184:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2188:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a218c:	327f      	adds	r2, #127	; 0x7f
 80a218e:	bfc2      	ittt	gt
 80a2190:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2194:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2198:	4770      	bxgt	lr
 80a219a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a219e:	f04f 0300 	mov.w	r3, #0
 80a21a2:	3a01      	subs	r2, #1
 80a21a4:	e737      	b.n	80a2016 <__aeabi_fmul+0x92>
 80a21a6:	f092 0f00 	teq	r2, #0
 80a21aa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a21ae:	bf02      	ittt	eq
 80a21b0:	0040      	lsleq	r0, r0, #1
 80a21b2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a21b6:	3a01      	subeq	r2, #1
 80a21b8:	d0f9      	beq.n	80a21ae <__aeabi_fdiv+0xc2>
 80a21ba:	ea40 000c 	orr.w	r0, r0, ip
 80a21be:	f093 0f00 	teq	r3, #0
 80a21c2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a21c6:	bf02      	ittt	eq
 80a21c8:	0049      	lsleq	r1, r1, #1
 80a21ca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a21ce:	3b01      	subeq	r3, #1
 80a21d0:	d0f9      	beq.n	80a21c6 <__aeabi_fdiv+0xda>
 80a21d2:	ea41 010c 	orr.w	r1, r1, ip
 80a21d6:	e795      	b.n	80a2104 <__aeabi_fdiv+0x18>
 80a21d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a21dc:	ea92 0f0c 	teq	r2, ip
 80a21e0:	d108      	bne.n	80a21f4 <__aeabi_fdiv+0x108>
 80a21e2:	0242      	lsls	r2, r0, #9
 80a21e4:	f47f af7d 	bne.w	80a20e2 <__aeabi_fmul+0x15e>
 80a21e8:	ea93 0f0c 	teq	r3, ip
 80a21ec:	f47f af70 	bne.w	80a20d0 <__aeabi_fmul+0x14c>
 80a21f0:	4608      	mov	r0, r1
 80a21f2:	e776      	b.n	80a20e2 <__aeabi_fmul+0x15e>
 80a21f4:	ea93 0f0c 	teq	r3, ip
 80a21f8:	d104      	bne.n	80a2204 <__aeabi_fdiv+0x118>
 80a21fa:	024b      	lsls	r3, r1, #9
 80a21fc:	f43f af4c 	beq.w	80a2098 <__aeabi_fmul+0x114>
 80a2200:	4608      	mov	r0, r1
 80a2202:	e76e      	b.n	80a20e2 <__aeabi_fmul+0x15e>
 80a2204:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2208:	bf18      	it	ne
 80a220a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a220e:	d1ca      	bne.n	80a21a6 <__aeabi_fdiv+0xba>
 80a2210:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a2214:	f47f af5c 	bne.w	80a20d0 <__aeabi_fmul+0x14c>
 80a2218:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a221c:	f47f af3c 	bne.w	80a2098 <__aeabi_fmul+0x114>
 80a2220:	e75f      	b.n	80a20e2 <__aeabi_fmul+0x15e>
 80a2222:	bf00      	nop

080a2224 <__gesf2>:
 80a2224:	f04f 3cff 	mov.w	ip, #4294967295
 80a2228:	e006      	b.n	80a2238 <__cmpsf2+0x4>
 80a222a:	bf00      	nop

080a222c <__lesf2>:
 80a222c:	f04f 0c01 	mov.w	ip, #1
 80a2230:	e002      	b.n	80a2238 <__cmpsf2+0x4>
 80a2232:	bf00      	nop

080a2234 <__cmpsf2>:
 80a2234:	f04f 0c01 	mov.w	ip, #1
 80a2238:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a223c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a2240:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2244:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2248:	bf18      	it	ne
 80a224a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a224e:	d011      	beq.n	80a2274 <__cmpsf2+0x40>
 80a2250:	b001      	add	sp, #4
 80a2252:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a2256:	bf18      	it	ne
 80a2258:	ea90 0f01 	teqne	r0, r1
 80a225c:	bf58      	it	pl
 80a225e:	ebb2 0003 	subspl.w	r0, r2, r3
 80a2262:	bf88      	it	hi
 80a2264:	17c8      	asrhi	r0, r1, #31
 80a2266:	bf38      	it	cc
 80a2268:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a226c:	bf18      	it	ne
 80a226e:	f040 0001 	orrne.w	r0, r0, #1
 80a2272:	4770      	bx	lr
 80a2274:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2278:	d102      	bne.n	80a2280 <__cmpsf2+0x4c>
 80a227a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a227e:	d105      	bne.n	80a228c <__cmpsf2+0x58>
 80a2280:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a2284:	d1e4      	bne.n	80a2250 <__cmpsf2+0x1c>
 80a2286:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a228a:	d0e1      	beq.n	80a2250 <__cmpsf2+0x1c>
 80a228c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2290:	4770      	bx	lr
 80a2292:	bf00      	nop

080a2294 <__aeabi_cfrcmple>:
 80a2294:	4684      	mov	ip, r0
 80a2296:	4608      	mov	r0, r1
 80a2298:	4661      	mov	r1, ip
 80a229a:	e7ff      	b.n	80a229c <__aeabi_cfcmpeq>

080a229c <__aeabi_cfcmpeq>:
 80a229c:	b50f      	push	{r0, r1, r2, r3, lr}
 80a229e:	f7ff ffc9 	bl	80a2234 <__cmpsf2>
 80a22a2:	2800      	cmp	r0, #0
 80a22a4:	bf48      	it	mi
 80a22a6:	f110 0f00 	cmnmi.w	r0, #0
 80a22aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a22ac <__aeabi_fcmpeq>:
 80a22ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a22b0:	f7ff fff4 	bl	80a229c <__aeabi_cfcmpeq>
 80a22b4:	bf0c      	ite	eq
 80a22b6:	2001      	moveq	r0, #1
 80a22b8:	2000      	movne	r0, #0
 80a22ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80a22be:	bf00      	nop

080a22c0 <__aeabi_fcmplt>:
 80a22c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a22c4:	f7ff ffea 	bl	80a229c <__aeabi_cfcmpeq>
 80a22c8:	bf34      	ite	cc
 80a22ca:	2001      	movcc	r0, #1
 80a22cc:	2000      	movcs	r0, #0
 80a22ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80a22d2:	bf00      	nop

080a22d4 <__aeabi_fcmple>:
 80a22d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a22d8:	f7ff ffe0 	bl	80a229c <__aeabi_cfcmpeq>
 80a22dc:	bf94      	ite	ls
 80a22de:	2001      	movls	r0, #1
 80a22e0:	2000      	movhi	r0, #0
 80a22e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a22e6:	bf00      	nop

080a22e8 <__aeabi_fcmpge>:
 80a22e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a22ec:	f7ff ffd2 	bl	80a2294 <__aeabi_cfrcmple>
 80a22f0:	bf94      	ite	ls
 80a22f2:	2001      	movls	r0, #1
 80a22f4:	2000      	movhi	r0, #0
 80a22f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a22fa:	bf00      	nop

080a22fc <__aeabi_fcmpgt>:
 80a22fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2300:	f7ff ffc8 	bl	80a2294 <__aeabi_cfrcmple>
 80a2304:	bf34      	ite	cc
 80a2306:	2001      	movcc	r0, #1
 80a2308:	2000      	movcs	r0, #0
 80a230a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a230e:	bf00      	nop

080a2310 <atexit>:
 80a2310:	2300      	movs	r3, #0
 80a2312:	4601      	mov	r1, r0
 80a2314:	461a      	mov	r2, r3
 80a2316:	4618      	mov	r0, r3
 80a2318:	f000 b842 	b.w	80a23a0 <__register_exitproc>

080a231c <memcpy>:
 80a231c:	440a      	add	r2, r1
 80a231e:	4291      	cmp	r1, r2
 80a2320:	f100 33ff 	add.w	r3, r0, #4294967295
 80a2324:	d100      	bne.n	80a2328 <memcpy+0xc>
 80a2326:	4770      	bx	lr
 80a2328:	b510      	push	{r4, lr}
 80a232a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a232e:	4291      	cmp	r1, r2
 80a2330:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2334:	d1f9      	bne.n	80a232a <memcpy+0xe>
 80a2336:	bd10      	pop	{r4, pc}

080a2338 <memset>:
 80a2338:	4603      	mov	r3, r0
 80a233a:	4402      	add	r2, r0
 80a233c:	4293      	cmp	r3, r2
 80a233e:	d100      	bne.n	80a2342 <memset+0xa>
 80a2340:	4770      	bx	lr
 80a2342:	f803 1b01 	strb.w	r1, [r3], #1
 80a2346:	e7f9      	b.n	80a233c <memset+0x4>

080a2348 <srand>:
 80a2348:	b538      	push	{r3, r4, r5, lr}
 80a234a:	4b0d      	ldr	r3, [pc, #52]	; (80a2380 <srand+0x38>)
 80a234c:	4604      	mov	r4, r0
 80a234e:	681d      	ldr	r5, [r3, #0]
 80a2350:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a2352:	b97b      	cbnz	r3, 80a2374 <srand+0x2c>
 80a2354:	2018      	movs	r0, #24
 80a2356:	f7fe fa0f 	bl	80a0778 <malloc>
 80a235a:	4a0a      	ldr	r2, [pc, #40]	; (80a2384 <srand+0x3c>)
 80a235c:	4b0a      	ldr	r3, [pc, #40]	; (80a2388 <srand+0x40>)
 80a235e:	63a8      	str	r0, [r5, #56]	; 0x38
 80a2360:	e9c0 2300 	strd	r2, r3, [r0]
 80a2364:	4b09      	ldr	r3, [pc, #36]	; (80a238c <srand+0x44>)
 80a2366:	2201      	movs	r2, #1
 80a2368:	6083      	str	r3, [r0, #8]
 80a236a:	230b      	movs	r3, #11
 80a236c:	8183      	strh	r3, [r0, #12]
 80a236e:	2300      	movs	r3, #0
 80a2370:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2374:	2200      	movs	r2, #0
 80a2376:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a2378:	611c      	str	r4, [r3, #16]
 80a237a:	615a      	str	r2, [r3, #20]
 80a237c:	bd38      	pop	{r3, r4, r5, pc}
 80a237e:	bf00      	nop
 80a2380:	20000004 	.word	0x20000004
 80a2384:	abcd330e 	.word	0xabcd330e
 80a2388:	e66d1234 	.word	0xe66d1234
 80a238c:	0005deec 	.word	0x0005deec

080a2390 <strlen>:
 80a2390:	4603      	mov	r3, r0
 80a2392:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2396:	2a00      	cmp	r2, #0
 80a2398:	d1fb      	bne.n	80a2392 <strlen+0x2>
 80a239a:	1a18      	subs	r0, r3, r0
 80a239c:	3801      	subs	r0, #1
 80a239e:	4770      	bx	lr

080a23a0 <__register_exitproc>:
 80a23a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a23a4:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a2464 <__register_exitproc+0xc4>
 80a23a8:	4606      	mov	r6, r0
 80a23aa:	f8d8 0000 	ldr.w	r0, [r8]
 80a23ae:	461f      	mov	r7, r3
 80a23b0:	460d      	mov	r5, r1
 80a23b2:	4691      	mov	r9, r2
 80a23b4:	f000 f858 	bl	80a2468 <__retarget_lock_acquire_recursive>
 80a23b8:	4b26      	ldr	r3, [pc, #152]	; (80a2454 <__register_exitproc+0xb4>)
 80a23ba:	681c      	ldr	r4, [r3, #0]
 80a23bc:	b934      	cbnz	r4, 80a23cc <__register_exitproc+0x2c>
 80a23be:	4c26      	ldr	r4, [pc, #152]	; (80a2458 <__register_exitproc+0xb8>)
 80a23c0:	601c      	str	r4, [r3, #0]
 80a23c2:	4b26      	ldr	r3, [pc, #152]	; (80a245c <__register_exitproc+0xbc>)
 80a23c4:	b113      	cbz	r3, 80a23cc <__register_exitproc+0x2c>
 80a23c6:	681b      	ldr	r3, [r3, #0]
 80a23c8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a23cc:	6863      	ldr	r3, [r4, #4]
 80a23ce:	2b1f      	cmp	r3, #31
 80a23d0:	dd07      	ble.n	80a23e2 <__register_exitproc+0x42>
 80a23d2:	f8d8 0000 	ldr.w	r0, [r8]
 80a23d6:	f000 f849 	bl	80a246c <__retarget_lock_release_recursive>
 80a23da:	f04f 30ff 	mov.w	r0, #4294967295
 80a23de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a23e2:	b35e      	cbz	r6, 80a243c <__register_exitproc+0x9c>
 80a23e4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a23e8:	b988      	cbnz	r0, 80a240e <__register_exitproc+0x6e>
 80a23ea:	4b1d      	ldr	r3, [pc, #116]	; (80a2460 <__register_exitproc+0xc0>)
 80a23ec:	b923      	cbnz	r3, 80a23f8 <__register_exitproc+0x58>
 80a23ee:	f8d8 0000 	ldr.w	r0, [r8]
 80a23f2:	f000 f83a 	bl	80a246a <__retarget_lock_release>
 80a23f6:	e7f0      	b.n	80a23da <__register_exitproc+0x3a>
 80a23f8:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a23fc:	f7fe f9bc 	bl	80a0778 <malloc>
 80a2400:	2800      	cmp	r0, #0
 80a2402:	d0f4      	beq.n	80a23ee <__register_exitproc+0x4e>
 80a2404:	2300      	movs	r3, #0
 80a2406:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a240a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a240e:	2201      	movs	r2, #1
 80a2410:	6863      	ldr	r3, [r4, #4]
 80a2412:	2e02      	cmp	r6, #2
 80a2414:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a2418:	fa02 f203 	lsl.w	r2, r2, r3
 80a241c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a2420:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a2424:	ea43 0302 	orr.w	r3, r3, r2
 80a2428:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a242c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a2430:	bf02      	ittt	eq
 80a2432:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a2436:	431a      	orreq	r2, r3
 80a2438:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80a243c:	6863      	ldr	r3, [r4, #4]
 80a243e:	f8d8 0000 	ldr.w	r0, [r8]
 80a2442:	1c5a      	adds	r2, r3, #1
 80a2444:	3302      	adds	r3, #2
 80a2446:	6062      	str	r2, [r4, #4]
 80a2448:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a244c:	f000 f80e 	bl	80a246c <__retarget_lock_release_recursive>
 80a2450:	2000      	movs	r0, #0
 80a2452:	e7c4      	b.n	80a23de <__register_exitproc+0x3e>
 80a2454:	200005f0 	.word	0x200005f0
 80a2458:	20000564 	.word	0x20000564
 80a245c:	00000000 	.word	0x00000000
 80a2460:	080a0779 	.word	0x080a0779
 80a2464:	20000068 	.word	0x20000068

080a2468 <__retarget_lock_acquire_recursive>:
 80a2468:	4770      	bx	lr

080a246a <__retarget_lock_release>:
 80a246a:	4770      	bx	lr

080a246c <__retarget_lock_release_recursive>:
 80a246c:	4770      	bx	lr

080a246e <link_code_end>:
	...

080a2470 <dynalib_user>:
 80a2470:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80a2480:	0000 0000 0020 7453 7261 6974 676e 5420     .... .Starting T
 80a2490:	7265 6172 6972 6d75 6d20 6e6f 7469 726f     errarium monitor
 80a24a0:	6e69 2067 7061 6c70 6369 7461 6f69 2e6e     ing application.
 80a24b0:	4700 7465 6974 676e 6c20 6769 7468 5400     .Getting light.T
 80a24c0:	5345 0054 6552 6361 6568 2064 7865 6f70     EST.Reached expo
 80a24d0:	7573 6572 6620 726f 7420 6568 6420 7961     sure for the day
 80a24e0:	4500 7078 736f 7275 2065 6964 6666 7265     .Exposure differ
 80a24f0:	6e65 6563 4300 7275 6572 746e 6520 7078     ence.Current exp
 80a2500:	736f 7275 2065 6974 656d 003a 616e 006e     osure time:.nan.
 80a2510:	6e69 0066 766f 0066 7061 0070 5925 252d     inf.ovf.app.%Y-%
 80a2520:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
 80a2530:	7361 7463 6d69 0065                         asctime.

080a2538 <_ZTV9IPAddress>:
	...
 80a2540:	0cf9 080a 0ce9 080a 0ceb 080a               ............

080a254c <_ZTV9USBSerial>:
	...
 80a2554:	0db7 080a 0e1d 080a 0df5 080a 08cb 080a     ................
 80a2564:	0de7 080a 0db9 080a 0dc9 080a 0e17 080a     ................
 80a2574:	0dd9 080a 0db1 080a                         ........

080a257c <_ZTV11USARTSerial>:
	...
 80a2584:	0f45 080a 0faf 080a 0f8b 080a 08cb 080a     E...............
 80a2594:	0f5b 080a 0f77 080a 0f69 080a 0f85 080a     [...w...i.......
 80a25a4:	0f47 080a 0f4d 080a                         G...M...

080a25ac <_ZTV7TwoWire>:
	...
 80a25b4:	1031 080a 107b 080a 1053 080a 1033 080a     1...{...S...3...
 80a25c4:	105b 080a 1063 080a 106b 080a 1073 080a     [...c...k...s...

080a25d4 <_ZTVN5spark9WiFiClassE>:
	...
 80a25dc:	11c5 080a 11bb 080a 11b1 080a 112f 080a     ............/...
 80a25ec:	0b45 080a 11a5 080a 1225 080a 122d 080a     E.......%...-...
 80a25fc:	1199 080a 1191 080a 1187 080a 117d 080a     ............}...
 80a260c:	1139 080a                                   9...

080a2610 <_ZTVN5spark12NetworkClassE>:
	...
 80a2618:	11e5 080a 11ef 080a 11f9 080a 1203 080a     ................
 80a2628:	120d 080a 1219 080a 1225 080a 122d 080a     ........%...-...
 80a2638:	1235 080a 1241 080a 1249 080a 1253 080a     5...A...I...S...
 80a2648:	125d 080a                                   ]...

080a264c <_ZSt7nothrow>:
	...

080a264d <link_const_variable_data_end>:
 80a264d:	00          	.byte	0x00
	...

080a2650 <link_constructors_location>:
 80a2650:	080a0469 	.word	0x080a0469
 80a2654:	080a07b9 	.word	0x080a07b9
 80a2658:	080a0b51 	.word	0x080a0b51
 80a265c:	080a0b61 	.word	0x080a0b61
 80a2660:	080a0b7d 	.word	0x080a0b7d
 80a2664:	080a11d1 	.word	0x080a11d1
 80a2668:	080a12ad 	.word	0x080a12ad
 80a266c:	080a12c1 	.word	0x080a12c1
